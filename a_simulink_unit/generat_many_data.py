# coding=utf-8

"""
批量生成模拟数据
可在生成后删除.
"""
from datetime import datetime, timedelta
import os
import codecs
import time
import random

from faker import Faker
# from china_regions.data import provinces, get_cities_by_province, get_districts_by_city
import pandas
import numpy as np
import pandas as pd

def normal(size):
    arr = np.random.normal(size=size+1)
    arr = np.round(arr, decimals=2)
    return arr


def get(faker: Faker, mcfieldnamezh, mctablenamezh=''):
    """
    根据表字段的中文名修正为合适的生成方式
    扩展建议:
    根据字段名->实体名->枚举
    关联字段->同时生成多个字段
    """
    val = ''
    if 'ID' in mcfieldnamezh or '主键' in mcfieldnamezh or '唯一标识' in mcfieldnamezh:
        val = str(faker.uuid4())[:8]
        return val
    if '时间戳' == mcfieldnamezh:
        # val = str(int(time.mktime(faker.date_this_decade().timetuple())))
        # return val
        val = faker.date_between(
            start_date=datetime.now() - timedelta(days=3 * 4), end_date=datetime.now()
        )
        return val

    if '时间' in mcfieldnamezh:
        val = faker.date_between(start_date=datetime.now() - timedelta(days=3 * 4),
                                 end_date=datetime.now())
        return val
    if '日期' in mcfieldnamezh:
        val = faker.date_between(start_date=datetime.now() - timedelta(days=3 * 4),
                                 end_date=datetime.now())
        return val
    if '率' == mcfieldnamezh[-1]:
        val = int(normal(10)[faker.random.randint(0,10)])
        return val
    if '地点' in mcfieldnamezh:
        val = faker.address()
        return val
    # if '类型' in mcfieldnamezh or '类别' in mcfieldnamezh:
    #     val = faker.random.choice((
    #         # 根据文心一言/chatgpt/chatglm生产20个左右的类别即可.
    #     ))
    #     return val

        
    # 机器人信息表
    
    # 机器人信息表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人信息表.机器人名称 <CharField>
    # 
    if mcfieldnamezh == '机器人名称':
        
        # 给出一些机器人信息表表中机器人名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人信息表.型号编号 <CharField>
    # 
    if mcfieldnamezh == '型号编号':
        
        # 载入配置成功
        # 给出一些机器人信息表表中型号编号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '型号1', ' 型号2', ' 型号3', ' 型号4', ' 型号5', ' 型号6', ' 型号7', ' 型号8', ' 型号9', ' 型号10', ' 型号11', ' 型号12', ' 型号13', ' 型号14', ' 型号15', ' 型号16', ' 型号17', ' 型号18', ' 型号19', ' 型号20', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人信息表.序列号 <CharField>
    # 
    if mcfieldnamezh == '序列号':
        
        # 载入配置成功
        # 给出一些机器人信息表表中序列号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'SN0001', ' SN0002', ' SN0003', ' SN0004', ' SN0005', ' SN0006', ' SN0007', ' SN0008', ' SN0009', ' SN0010', ' SN0011', ' SN0012', ' SN0013', ' SN0014', ' SN0015', ' SN0016', ' SN0017', ' SN0018', ' SN0019', ' SN0020', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人信息表.生产日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产日期':
        
        # 载入配置成功
        # 给出一些机器人信息表表中生产日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人信息表.最近维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最近维护日期':
        
        # 载入配置成功
        # 给出一些机器人信息表表中最近维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-24', ' 2023-10-25', ' 2023-10-26', ' 2023-10-27', ' 2023-10-28', ' 2023-10-29', ' 2023-10-30', ' 2023-10-31', ' 2023-11-01', ' 2023-11-02', ' 2023-11-03', ' 2023-11-04', ' 2023-11-05', ' 2023-11-06', ' 2023-11-07', ' 2023-11-08', ' 2023-11-09', ' 2023-11-10', ' 2023-11-11', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人信息表.运行状态 <CharField>
    # 
    if mcfieldnamezh == '运行状态':
        
        # 给出一些机器人信息表表中运行状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人信息表.位置 <CharField>
    # 
    if mcfieldnamezh == '位置':
        
        # 载入配置成功
        # 给出一些机器人信息表表中位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波', ', 'SELECT * FROM locations WHERE position IN (北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波);'
    ))

        val = loadvalue
        
        return val
    
    # 机器人信息表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 生产线信息表
    
    # 生产线信息表.生产线ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产线ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线信息表.生产线名称 <CharField>
    # 
    if mcfieldnamezh == '生产线名称':
        
        # 给出一些生产线信息表表中生产线名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线信息表.生产线位置 <CharField>
    # 
    if mcfieldnamezh == '生产线位置':
        
        # 给出一些生产线信息表表中生产线位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线信息表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些生产线信息表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线信息表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 生产线信息表.最大产能 <CharField>
    # 
    if mcfieldnamezh == '最大产能':
        
        # 给出一些生产线信息表表中最大产能的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线信息表.维护周期 <CharField>
    # 
    if mcfieldnamezh == '维护周期':
        
        # 载入配置成功
        # 给出一些生产线信息表表中维护周期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '每日', ' 每周', ' 每两周', ' 每月', ' 每季度', ' 每半年', ' 每年', ' 每两年', ' 每三年', ' 每四年', ' 每五年', ' 每工作日', ' 每周末', ' 每周一', ' 每周二', ' 每周三', ' 每周四', ' 每周五', ' 每周六', ' 每周日', ' 自定义', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线信息表.上次维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上次维护日期':
        
        # 载入配置成功
        # 给出一些生产线信息表表中上次维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '上次维护日期:', ' 2023-10-23', ', 'INSERT INTO 表名 (上次维护日期) VALUES (2023-10-23);', 'SELECT 上次维护日期 FROM 表名;'
    ))

        val = loadvalue
        
        return val
    
    # 生产线信息表.机器人数量 <IntegerField>
    # 
    if mcfieldnamezh == '机器人数量':
        
        # 给出一些生产线信息表表中机器人数量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线信息表.关联工厂ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联工厂ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 安全监控日志表
    
    # 安全监控日志表.日志ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '日志ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 安全监控日志表.设备ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '设备ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 安全监控日志表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 安全监控日志表.事件类型 <CharField>
    # 
    if mcfieldnamezh == '事件类型':
        
        # 载入配置成功
        # 给出一些安全监控日志表表中事件类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '用户登录', ' 订单创建', ' 订单支付', ' 商品浏览', ' 购物车添加', ' 购物车移除', ' 商品评论', ' 用户注册', ' 密码修改', ' 订单取消', ' 优惠券领取', ' 活动参与', ' 会员续费', ' 退款申请', ' 退款成功', ' 投诉提交', ' 投诉处理', ' 系统维护', ' 系统通知', ' 数据更新', '
    ))

        val = loadvalue
        
        return val
    
    # 安全监控日志表.事件发生时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '事件发生时间':
        
        # 载入配置成功
        # 给出一些安全监控日志表表中事件发生时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 12:45:15', ' 2023-10-23 14:30:00', ' 2023-10-23 16:10:45', ', '2023-10-24 08:30:00', ' 2023-10-24 11:05:15', ' 2023-10-24 13:20:30', ' 2023-10-24 15:45:00', ' 2023-10-24 18:10:15', ', '2023-10-25 09:30:00', ' 2023-10-25 11:45:15', ' 2023-10-25 14:00:30', ' 2023-10-25 16:15:00', ' 2023-10-25 18:30:45', ', '2023-10-26 10:00:00', ' 2023-10-26 12:15:30', ' 2023-10-26 14:45:15', ' 2023-10-26 17:00:00', ' 2023-10-26 19:15:45', '
    ))

        val = loadvalue
        
        return val
    
    # 安全监控日志表.事件描述 <TextField>
    # 
    if mcfieldnamezh == '事件描述':
        
        # 载入配置成功
        # 给出一些安全监控日志表表中事件描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '用户成功登录系统', ' 订单编号为12345已发货', ' 服务器A发生宕机事件', ' 用户反馈页面加载缓慢', ' 产品A的库存低于警戒线', ', '系统更新至v1.2.3版本', ' 用户张三提交了退款申请', ' 营销邮件发送成功，但部分用户未收到', ' 数据库备份成功完成', ', '支付接口出现短暂故障，现已恢复', ' 新用户注册量今日突破1000人', ' 网站首页图片更新完成', ' 内部培训会议于今日举行', ', '服务器B的CPU使用率持续偏高', ' 用户反馈产品B存在质量问题', ' 系统检测到异常登录尝试，已拦截', ' 订单编号为67890被取消', ', '用户李四修改了收货地址', ' 财务系统将于今晚进行维护，届时将无法访问'
    ))

        val = loadvalue
        
        return val
    
    # 安全监控日志表.严重程度 <CharField>
    # 
    if mcfieldnamezh == '严重程度':
        
        # 载入配置成功
        # 给出一些安全监控日志表表中严重程度的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '轻微', ' 一般', ' 中等', ' 较高', ' 严重', ' 很严重', ' 紧急', ' 非常紧急', ' 灾难性', ' 致命', ' 轻微影响', ' 中度影响', ' 重大影响', ' 高度影响', ' 极度影响', ' 轻微风险', ' 中等风险', ' 高风险', ' 极高风险', ' 未知严重程度', '
    ))

        val = loadvalue
        
        return val
    
    # 安全监控日志表.采取的措施 <CharField>
    # 
    if mcfieldnamezh == '采取的措施':
        
        # 载入配置成功
        # 给出一些安全监控日志表表中采取的措施的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '加强员工培训', ' 优化工作流程', ' 引入新技术', ' 提高产品质量', ' 加强市场营销', ' 改善客户服务', ' 降低生产成本', ' 加强供应链管理', ' 推出新产品', ' 进行市场调研', ' 优化库存管理', ' 提高生产效率', ' 加强品牌建设', ' 拓展销售渠道', ' 改善办公环境', ' 加强团队合作', ' 制定新的销售策略', ' 提升员工福利待遇', ' 加强数据安全', ' 优化网站用户体验', '
    ))

        val = loadvalue
        
        return val
    
    # 安全监控日志表.操作人员ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '操作人员ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报警记录表
    
    # 报警记录表.记录ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '记录ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报警记录表.报警时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报警时间':
        
        # 载入配置成功
        # 给出一些报警记录表表中报警时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-23 08:15:30', ' 2023-10-23 08:30:45', ' 2023-10-23 08:45:15', ', '2023-10-23 09:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 09:30:45', ' 2023-10-23 09:45:15', ', '2023-10-23 10:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 10:45:15', ', '2023-10-23 11:00:00', ' 2023-10-23 11:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 11:45:15', ', '2023-10-23 12:00:00', ' 2023-10-23 12:15:30', ' 2023-10-23 12:30:45', ' 2023-10-23 12:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 报警记录表.报警类型 <CharField>
    # 
    if mcfieldnamezh == '报警类型':
        
        # 载入配置成功
        # 给出一些报警记录表表中报警类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '火灾报警', '入侵报警', '烟雾报警', '温度异常报警', '水位报警', '气体泄漏报警', '电力故障报警', '设备故障报警', '网络故障报警', '视频丢失报警', '门禁异常报警', '震动报警', '声音异常报警', '湿度异常报警', '压力异常报警', '流量异常报警', '电压异常报警', '电流异常报警', '风速异常报警', '火灾探测器故障报警', '
    ))

        val = loadvalue
        
        return val
    
    # 报警记录表.报警等级 <CharField>
    # 
    if mcfieldnamezh == '报警等级':
        
        # 载入配置成功
        # 给出一些报警记录表表中报警等级的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '等级1', ' 等级2', ' 等级3', ' 等级4', ' 等级5', ' 等级6', ' 等级7', ' 等级8', ' 等级9', ' 等级10', ', '紧急', ' 严重', ' 高', ' 中', ' 低', ' 警告', ' 通知', ' 信息', ' 自定义1', ' 自定义2', '
    ))

        val = loadvalue
        
        return val
    
    # 报警记录表.报警描述 <TextField>
    # 
    if mcfieldnamezh == '报警描述':
        
        # 载入配置成功
        # 给出一些报警记录表表中报警描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '系统温度过高', '请检查散热设备', ', '服务器负载过高', '可能需要增加资源', ', '网络连接中断', '请检查网络线路', ', '数据库连接失败', '请检查数据库服务状态', ', '磁盘空间不足', '请清理无用文件或增加存储空间', ', '防火墙检测到异常访问', '请检查安全日志', ', '应用程序崩溃', '请重启应用或联系技术支持', ', '电源供应不稳定', '请检查电源设备', ', '内存泄漏', '系统性能下降', '请优化代码或增加内存', ', '未授权访问尝试', '请加强系统安全设置', ', '硬件故障', '请联系硬件供应商进行维修', ', '软件更新失败', '请重新尝试或联系技术支持', ', '系统时间异常', '请校准系统时间', ', '用户账户异常登录', '请检查账户安全', ', '文件损坏', '请尝试恢复或重新下载', ', '服务未启动', '请手动启动服务', ', '配置错误', '请检查配置文件', ', '日志文件过大', '请清理或配置日志轮转', ', '备份失败', '请检查备份设置或存储空间', ', '系统性能瓶颈', '请进行性能调优'
    ))

        val = loadvalue
        
        return val
    
    # 报警记录表.机器人ID关联字段 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID关联字段':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报警记录表.是否已解决 <BooleanField>
    # 
    if mcfieldnamezh == '是否已解决':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报警记录表.解决时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '解决时间':
        
        # 载入配置成功
        # 给出一些报警记录表表中解决时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 10:00:00', ' 2023-10-23 11:30:15', ' 2023-10-23 13:45:20', ' 2023-10-23 15:10:30', ', '2023-10-24 09:05:00', ' 2023-10-24 12:20:10', ' 2023-10-24 14:35:25', ' 2023-10-24 16:50:30', ', '2023-10-25 10:15:00', ' 2023-10-25 11:40:15', ' 2023-10-25 13:55:20', ' 2023-10-25 15:20:30', ', '2023-10-26 09:35:00', ' 2023-10-26 12:10:10', ' 2023-10-26 14:25:25', ' 2023-10-26 16:40:30', ', '2023-10-27 10:55:00', ' 2023-10-27 12:30:15', ' 2023-10-27 14:45:20', ' 2023-10-27 17:00:30', '
    ))

        val = loadvalue
        
        return val
    
    # 报警记录表.报警位置 <CharField>
    # 
    if mcfieldnamezh == '报警位置':
        
        # 给出一些报警记录表表中报警位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 机器人位置表
    
    # 机器人位置表.机器人ID唯一标识每一个智能机器人的编号 <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID唯一标识每一个智能机器人的编号':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人位置表.位置编码机器人当前所在位置的唯一编码 <CharField>
    # 
    if mcfieldnamezh == '位置编码机器人当前所在位置的唯一编码':
        
        # 给出一些机器人位置表表中位置编码机器人当前所在位置的唯一编码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.区域名称机器人所在区域的名称 <CharField>
    # 
    if mcfieldnamezh == '区域名称机器人所在区域的名称':
        
        # 给出一些机器人位置表表中区域名称机器人所在区域的名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.坐标机器人在该区域内的X轴坐标 <CharField>
    # 
    if mcfieldnamezh == '坐标机器人在该区域内的X轴坐标':
        
        # 给出一些机器人位置表表中坐标机器人在该区域内的X轴坐标的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.坐标机器人在该区域内的Y轴坐标 <CharField>
    # 
    if mcfieldnamezh == '坐标机器人在该区域内的Y轴坐标':
        
        # 给出一些机器人位置表表中坐标机器人在该区域内的Y轴坐标的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.坐标机器人在该区域内的Z轴坐标如果适用 <CharField>
    # 
    if mcfieldnamezh == '坐标机器人在该区域内的Z轴坐标如果适用':
        
        # 给出一些机器人位置表表中坐标机器人在该区域内的Z轴坐标如果适用的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.状态机器人的当前状态如“运行中”、“空闲”、“故障”等 <CharField>
    # 
    if mcfieldnamezh == '状态机器人的当前状态如“运行中”、“空闲”、“故障”等':
        
        # 给出一些机器人位置表表中状态机器人的当前状态如“运行中”、“空闲”、“故障”等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.最后更新时间机器人位置信息最后一次更新的时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后更新时间机器人位置信息最后一次更新的时间':
        
        # 给出一些机器人位置表表中最后更新时间机器人位置信息最后一次更新的时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人位置表.工作站ID机器人当前所在的工作站的ID关联字段 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '工作站ID机器人当前所在的工作站的ID关联字段':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 机器人状态表
    
    # 机器人状态表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人状态表.状态 <CharField>
    # 
    if mcfieldnamezh == '状态':
        
        # 载入配置成功
        # 给出一些机器人状态表表中状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待处理', '已处理', '处理中', '已完成', '已取消', '待审核', '审核通过', '审核失败', '待发货', '已发货', '运输中', '已签收', '退货中', '已退货', '退款中', '已退款', '待支付', '已支付', '支付失败', '未知状态', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人状态表.时间戳 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '时间戳':
        
        # 载入配置成功
        # 给出一些机器人状态表表中时间戳的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 12:00:15', ' 2023-10-23 13:45:20', ' 2023-10-23 15:15:00', ' 2023-10-23 16:30:15', ' 2023-10-23 18:00:30', ' 2023-10-23 19:15:45', ' 2023-10-23 20:30:00', ' 2023-10-23 21:45:15', ' 2023-10-23 23:00:00', ' 2023-10-24 00:15:30', ' 2023-10-24 01:30:45', ' 2023-10-24 03:00:15', ' 2023-10-24 04:45:20', ' 2023-10-24 06:15:00', ' 2023-10-24 07:30:15', ' 2023-10-24 08:45:30', ' 2023-10-24 10:00:00', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人状态表.位置 <CharField>
    # 
    if mcfieldnamezh == '位置':
        
        # 载入配置成功
        # 给出一些机器人状态表表中位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波', ', 'SELECT * FROM locations WHERE position IN (北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波);'
    ))

        val = loadvalue
        
        return val
    
    # 机器人状态表.任务ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '任务ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人状态表.故障代码 <CharField>
    # 
    if mcfieldnamezh == '故障代码':
        
        # 载入配置成功
        # 给出一些机器人状态表表中故障代码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'ERR001', ' FAULT_A', ' CODE_B1', ' SYS_ERROR_2', ' HW_FAIL_3', ' SENSOR_MALF_4', ' COMM_ISSUE_5', ' BATTERY_LOW_6', ' OVERHEAT_7', ' UNDERVOLT_8', ' MOTOR_STALL_9', ' SOFTWARE_GLITCH_A', ' MEMORY_LEAK_B', ' DISK_FULL_C', ' NETWORK_DOWN_D', ' INPUT_INVALID_E', ' OUTPUT_ERROR_F', ' CONFIG_MISMATCH_G', ' UNAUTHORIZED_ACCESS_H', ' UNKNOWN_ERROR_I', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人状态表.维护标志 <CharField>
    # 
    if mcfieldnamezh == '维护标志':
        
        # 载入配置成功
        # 给出一些机器人状态表表中维护标志的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待维护', '已维护', '计划中', '暂停维护', '紧急维护', '日常检查', '季度保养', '半年大修', '年度更新', '升级中', '测试阶段', '维护完成', '无需维护', '低优先级', '中优先级', '高优先级', '立即处理', '延期处理', '待审批', '其他', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人状态表.电量水平 <CharField>
    # 
    if mcfieldnamezh == '电量水平':
        
        # 给出一些机器人状态表表中电量水平的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人状态表.上次维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上次维护日期':
        
        # 载入配置成功
        # 给出一些机器人状态表表中上次维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '上次维护日期:', ' 2023-10-23', ', 'INSERT INTO 表名 (上次维护日期) VALUES (2023-10-23);', 'SELECT 上次维护日期 FROM 表名;'
    ))

        val = loadvalue
        
        return val
    
    # 机器人状态表.关联工作站ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联工作站ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 机器人任务表
    
    # 机器人任务表.任务ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '任务ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人任务表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人任务表.任务名称 <CharField>
    # 
    if mcfieldnamezh == '任务名称':
        
        # 载入配置成功
        # 给出一些机器人任务表表中任务名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '任务1', ' 任务2', ' 任务3', ' 任务4', ' 任务5', ' 任务6', ' 任务7', ' 任务8', ' 任务9', ' 任务10', ' 任务11', ' 任务12', ' 任务13', ' 任务14', ' 任务15', ' 任务16', ' 任务17', ' 任务18', ' 任务19', ' 任务20', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人任务表.开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '开始时间':
        
        # 载入配置成功
        # 给出一些机器人任务表表中开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01 00:00:00', ' 2023-01-02 12:34:56', ' 2023-01-03 23:59:59', ', '2023-01-04 08:00:00', ' 2023-01-05 14:15:16', ' 2023-01-06 09:30:00', ', '2023-01-07 11:00:00', ' 2023-01-08 17:45:00', ' 2023-01-09 10:20:30', ', '2023-01-10 19:00:00', ' 2023-01-11 13:15:45', ' 2023-01-12 22:45:00', ', '2023-01-13 01:30:00', ' 2023-01-14 16:00:00', ' 2023-01-15 04:45:00', ', '2023-01-16 18:30:00', ' 2023-01-17 07:15:00', ' 2023-01-18 20:45:00', ', '2023-01-19 06:00:00', ' 2023-01-20 15:00:00', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人任务表.结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '结束时间':
        
        # 载入配置成功
        # 给出一些机器人任务表表中结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 10:00:00', ' 2023-10-23 12:30:15', ' 2023-10-23 15:45:30', ' 2023-10-24 08:15:00', ', '2023-10-24 11:00:45', ' 2023-10-24 13:30:15', ' 2023-10-25 09:45:30', ' 2023-10-25 12:15:00', ', '2023-10-25 14:45:15', ' 2023-10-26 10:30:00', ' 2023-10-26 13:00:45', ' 2023-10-26 15:30:15', ', '2023-10-27 08:45:30', ' 2023-10-27 11:15:00', ' 2023-10-27 13:45:45', ' 2023-10-28 09:30:15', ', '2023-10-28 12:00:30', ' 2023-10-28 14:30:00', ' 2023-10-29 10:15:45', ' 2023-10-29 12:45:15'
    ))

        val = loadvalue
        
        return val
    
    # 机器人任务表.任务状态 <CharField>
    # 
    if mcfieldnamezh == '任务状态':
        
        # 载入配置成功
        # 给出一些机器人任务表表中任务状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待分配', ' 已分配', ' 进行中', ' 待审核', ' 审核通过', ' 审核拒绝', ' 待修改', ' 已修改', ' 待确认', ' 已确认', ' 待执行', ' 执行中', ' 执行完成', ' 待关闭', ' 已关闭', ' 已取消', ' 暂停中', ' 已恢复', ' 延期中', ' 已完成', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人任务表.任务优先级 <CharField>
    # 
    if mcfieldnamezh == '任务优先级':
        
        # 给出一些机器人任务表表中任务优先级的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人任务表.任务详情 <CharField>
    # 
    if mcfieldnamezh == '任务详情':
        
        # 载入配置成功
        # 给出一些机器人任务表表中任务详情的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '完成市场调研报告，并发送给项目经理', ', '修复网站首页的响应式布局问题', ', '与供应商沟通，确认下月订单数量', ', '编写并发布下一季度的产品推广计划', ', '组织并主持下周的部门例会', ', '更新项目进度表，确保所有任务按时完成', ', '与设计师沟通，修改产品详情页的设计稿', ', '准备并发送下周的客户拜访邮件', ', '分析上个月的销售数据，并制作报告', ', '跟进客户反馈，解决产品使用中的问题', ', '参加行业内的线上研讨会，了解最新动态', ', '编写并发布公司年度总结报告', ', '与法务部门沟通，审核新合同内容', ', '安排下周的新员工入职培训', ', '更新产品知识库，确保内容准确无误', ', '与团队成员沟通，明确下月的工作目标', ', '准备并发送本月的财务报表', ', '优化产品注册流程，提高用户体验', ', '与合作伙伴沟通，确认下季度的合作计划', ', '完成本周的工作总结，并发送给上级领导'
    ))

        val = loadvalue
        
        return val
    
    # 机器人任务表.失败原因 <CharField>
    # 
    if mcfieldnamezh == '失败原因':
        
        # 载入配置成功
        # 给出一些机器人任务表表中失败原因的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '网络连接错误', ' 服务器超时', ' 数据库连接失败', ' 文件读取错误', ' 权限不足', ' 参数错误', ' 无效的输入', ' 系统崩溃', ' 内存不足', ' 磁盘空间不足', ' 依赖服务未启动', ' 第三方API调用失败', ' 认证失败', ' 配置错误', ' 代码逻辑错误', ' 资源不存在', ' 请求超时', ' 加密错误', ' 数据格式错误', ' 未知错误', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人任务表.关联流程ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联流程ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 生产线配置表
    
    # 生产线配置表.生产线ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产线ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线配置表.生产线名称 <CharField>
    # 
    if mcfieldnamezh == '生产线名称':
        
        # 给出一些生产线配置表表中生产线名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线配置表.生产线位置 <CharField>
    # 
    if mcfieldnamezh == '生产线位置':
        
        # 给出一些生产线配置表表中生产线位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线配置表.产能 <CharField>
    # 
    if mcfieldnamezh == '产能':
        
        # 给出一些生产线配置表表中产能的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线配置表.生产线状态 <CharField>
    # 
    if mcfieldnamezh == '生产线状态':
        
        # 给出一些生产线配置表表中生产线状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线配置表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些生产线配置表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线配置表.最后更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后更新时间':
        
        # 载入配置成功
        # 给出一些生产线配置表表中最后更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:15:30', ' 2023-10-22 14:20:45', ' 2023-10-21 21:35:12', ' 2023-10-20 12:40:09', ', '2023-10-19 17:55:26', ' 2023-10-18 08:10:43', ' 2023-10-17 13:25:58', ' 2023-10-16 18:40:15', ', '2023-10-15 23:55:32', ' 2023-10-14 04:10:49', ' 2023-10-13 09:25:06', ' 2023-10-12 14:40:23', ', '2023-10-11 19:55:40', ' 2023-10-10 00:10:57', ' 2023-10-09 05:25:14', ' 2023-10-08 10:40:31', ', '2023-10-07 15:55:48', ' 2023-10-06 21:10:05', ' 2023-10-05 02:25:22', ' 2023-10-04 07:40:39', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线配置表.机器人数量 <IntegerField>
    # 
    if mcfieldnamezh == '机器人数量':
        
        # 给出一些生产线配置表表中机器人数量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线配置表.维护周期 <CharField>
    # 
    if mcfieldnamezh == '维护周期':
        
        # 载入配置成功
        # 给出一些生产线配置表表中维护周期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '每日', ' 每周', ' 每两周', ' 每月', ' 每季度', ' 每半年', ' 每年', ' 每两年', ' 每三年', ' 每四年', ' 每五年', ' 每工作日', ' 每周末', ' 每周一', ' 每周二', ' 每周三', ' 每周四', ' 每周五', ' 每周六', ' 每周日', ' 自定义', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线配置表.关联工厂ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联工厂ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 权限管理表
    
    # 权限管理表.权限ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '权限ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限管理表.权限名称 <CharField>
    # 
    if mcfieldnamezh == '权限名称':
        
        # 载入配置成功
        # 给出一些权限管理表表中权限名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '读取权限', ' 写入权限', ' 编辑权限', ' 删除权限', ' 查看报告', ' 导出数据', ' 导入数据', ' 管理用户', ' 配置设置', ' 发送通知', ' 审核内容', ' 发布内容', ' 禁用账户', ' 启用账户', ' 重置密码', ' 访问后台', ' 查看日志', ' 下载文件', ' 上传文件', ' 执行命令', '
    ))

        val = loadvalue
        
        return val
    
    # 权限管理表.权限描述 <TextField>
    # 
    if mcfieldnamezh == '权限描述':
        
        # 载入配置成功
        # 给出一些权限管理表表中权限描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '读取数据', ' 写入数据', ' 修改数据', ' 删除数据', ' 导出数据', ' 导入数据', ' 查看报告', ' 生成报告', ' 管理用户', ' 分配权限', ' 设置角色', ' 审核数据', ' 发布内容', ' 撤销内容', ' 备份数据库', ' 恢复数据库', ' 访问日志', ' 修改密码', ' 禁用账户', ' 启用账户', ', 'INSERT INTO permissions (description) VALUES', '(读取数据)', ', '(写入数据)', ', '(修改数据)', ', '-- ... 以此类推，为其他权限描述添加更多的INSERT语句', ';'
    ))

        val = loadvalue
        
        return val
    
    # 权限管理表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些权限管理表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 权限管理表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些权限管理表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 权限管理表.状态如启用禁用 <CharField>
    # 
    if mcfieldnamezh == '状态如启用禁用':
        
        # 给出一些权限管理表表中状态如启用禁用的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 权限管理表.关联角色ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联角色ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限管理表.关联用户ID可选用于特定用户权限 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联用户ID可选用于特定用户权限':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限管理表.系统模块如生产监控、设备控制等 <CharField>
    # 
    if mcfieldnamezh == '系统模块如生产监控、设备控制等':
        
        # 给出一些权限管理表表中系统模块如生产监控、设备控制等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 用户信息表
    
    # 用户信息表.用户ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户信息表.用户名 <CharField>
    # 
    if mcfieldnamezh == '用户名':
        
        # 载入配置成功
        # 给出一些用户信息表表中用户名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eve', ' Frank', ' Grace', ' Henry', ' Ivy', ' John', ' Kate', ' Larry', ' Mary', ' Nick', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Tom', ', 'Alice', ' Bob', ' Charlie', ' David', ' Eve', ' Frank', ' Grace', ' Henry', ' Ivy', ' John', ' Kate', ' Larry', ' Mary', ' Nick', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Tom', '
    ))

        val = loadvalue
        
        return val
    
    # 用户信息表.密码 <CharField>
    # 
    if mcfieldnamezh == '密码':
        
        # 载入配置成功
        # 给出一些用户信息表表中密码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Password123', ', 'Secure!Pass', ', '1q2w3e4r', ', 'MyFavoriteSong', ', 'LongerPasswordExample123', 'Password123', 'Secure!Pass', '
    ))

        val = loadvalue
        
        return val
    
    # 用户信息表.电子邮箱 <EmailField>
    # 
    if mcfieldnamezh == '电子邮箱':
        
        # 载入配置成功
        # 给出一些用户信息表表中电子邮箱的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'example1@email.com', ' example2@email.com', ' example3@email.com', ' example4@email.com', ' example5@email.com', ' example6@email.com', ' example7@email.com', ' example8@email.com', ' example9@email.com', ' example10@email.com', ' example11@email.com', ' example12@email.com', ' example13@email.com', ' example14@email.com', ' example15@email.com', ' example16@email.com', ' example17@email.com', ' example18@email.com', ' example19@email.com', ' example20@email.com', '
    ))

        val = loadvalue
        
        return val
    
    # 用户信息表.电话号码 <CharField>
    # 
    if mcfieldnamezh == '电话号码':
        
        # 载入配置成功
        # 给出一些用户信息表表中电话号码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '1234567890', ' 0987654321', ' 1112223334', ' 4445556667', ' 7778889990', ' 0001112223', ' 3334445556', ' 6667778889', ' 9990001112', ' 2223334445', ' 5556667778', ' 8889990001', ' 1357924680', ' 2468013579', ' 9876543210', ' 0123456789', ' 1029384756', ' 2130495867', ' 3241506978', ' 4352617089', '
    ))

        val = loadvalue
        
        return val
    
    # 用户信息表.角色ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '角色ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户信息表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些用户信息表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 用户信息表.最后登录时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后登录时间':
        
        # 载入配置成功
        # 给出一些用户信息表表中最后登录时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-22 15:30:45', ' 2023-10-21 22:15:12', ' 2023-10-20 10:45:30', ', '2023-10-19 18:30:00', ' 2023-10-18 12:00:45', ' 2023-10-17 09:15:30', ' 2023-10-16 16:45:15', ', '2023-10-15 23:30:00', ' 2023-10-14 17:15:45', ' 2023-10-13 11:00:30', ' 2023-10-12 08:45:15', ', '2023-10-11 15:30:00', ' 2023-10-10 22:15:45', ' 2023-10-09 16:00:30', ' 2023-10-08 10:45:15', ', '2023-10-07 18:30:00', ' 2023-10-06 13:15:45', ' 2023-10-05 07:00:30', ' 2023-10-04 20:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 用户信息表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 用户信息表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 角色信息表
    
    # 角色信息表.角色ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '角色ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 角色信息表.角色名称 <CharField>
    # 
    if mcfieldnamezh == '角色名称':
        
        # 载入配置成功
        # 给出一些角色信息表表中角色名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '角色1', ' 角色2', ' 角色3', ' 角色4', ' 角色5', ' 角色6', ' 角色7', ' 角色8', ' 角色9', ' 角色10', ' 角色11', ' 角色12', ' 角色13', ' 角色14', ' 角色15', ' 角色16', ' 角色17', ' 角色18', ' 角色19', ' 角色20', '
    ))

        val = loadvalue
        
        return val
    
    # 角色信息表.角色描述 <TextField>
    # 
    if mcfieldnamezh == '角色描述':
        
        # 载入配置成功
        # 给出一些角色信息表表中角色描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '系统管理员', '具有最高权限，可以管理所有用户和数据', ' 项目经理', '负责项目的整体规划和执行', ' 开发工程师', '负责编写和维护系统代码', ' 测试工程师', '负责系统的测试工作，确保质量', ' UI设计师', '负责设计用户界面和用户体验', ' 数据分析师', '负责收集和分析数据以提供决策支持', ' 市场营销经理', '负责市场推广和品牌建设', ' 客户服务代表', '负责处理客户咨询和投诉', ' 财务经理', '负责财务管理和预算控制', ' 人力资源经理', '负责招聘、培训和员工管理', ' 产品经理', '负责产品的规划、开发和推广', ' 销售经理', '负责销售团队的领导和销售业绩的达成', ' 技术支持工程师', '提供技术支持和解决方案', ' 内容编辑', '负责网站或应用的内容创作和编辑', ' 采购经理', '负责采购和供应商管理', ' 法务经理', '负责法律事务和合规管理', ' 公关经理', '负责公司的公关活动和媒体关系', ' 运营经理', '负责公司的日常运营和管理', ' 培训师', '负责员工培训和知识传授', ' 实习生', '参与公司的各项工作，学习实践经验', '
    ))

        val = loadvalue
        
        return val
    
    # 角色信息表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些角色信息表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 角色信息表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些角色信息表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 角色信息表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 角色信息表.权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 角色信息表.创建者ID关联字段指向创建该角色的用户ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID关联字段指向创建该角色的用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 角色信息表.更新者ID关联字段指向最后更新该角色的用户ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新者ID关联字段指向最后更新该角色的用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 用户角色关联表
    
    # 用户角色关联表.用户ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.角色名 <CharField>
    # 
    if mcfieldnamezh == '角色名':
        
        # 给出一些用户角色关联表表中角色名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 用户角色关联表.关联ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些用户角色关联表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 用户角色关联表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些用户角色关联表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 用户角色关联表.是否激活用于控制用户角色关系的有效性 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活用于控制用户角色关系的有效性':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 用户角色关联表.创建者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.更新者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.角色ID关联到角色的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '角色ID关联到角色的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 机器人故障表
    
    # 机器人故障表.故障ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '故障ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人故障表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人故障表.故障类型 <CharField>
    # 
    if mcfieldnamezh == '故障类型':
        
        # 载入配置成功
        # 给出一些机器人故障表表中故障类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '硬件故障', '软件故障', '网络故障', '电源故障', '磁盘故障', '内存故障', 'CPU故障', '主板故障', '显示器故障', '打印机故障', '路由器故障', '交换机故障', '服务器故障', '数据库故障', '应用崩溃', '系统崩溃', '配置错误', '连接问题', '性能下降', '未知故障', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人故障表.故障描述 <TextField>
    # 
    if mcfieldnamezh == '故障描述':
        
        # 载入配置成功
        # 给出一些机器人故障表表中故障描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '设备突然停止工作，无响应', ' 屏幕显示异常，出现花屏现象', ' 网络连接不稳定，频繁断开', ' 打印机无法打印，纸张卡住', ' 电源插头松动，设备无法开机', ' 软件崩溃，频繁出现错误提示', ' 键盘按键失灵，部分按键无反应', ' 鼠标移动不流畅，出现卡顿', ' 硬盘读写速度变慢，系统响应迟缓', ' 摄像头无法捕捉图像，黑屏', ' 音频输出异常，声音失真', ' USB接口无法识别设备', ' 蓝牙连接失败，无法配对', ' 显示器背光灯不亮', ' 系统更新后，部分功能无法使用', ' 电池电量消耗过快', ' 软件安装失败，提示未知错误', ' 触摸屏不灵敏，触摸无反应', ' 风扇噪音过大，影响使用', ' 无线网卡信号弱，连接不稳定', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人故障表.故障时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '故障时间':
        
        # 载入配置成功
        # 给出一些机器人故障表表中故障时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:30:15', ' 2023-10-23 12:45:20', ' 2023-10-23 14:15:30', ', '2023-10-23 16:00:00', ' 2023-10-24 08:30:10', ' 2023-10-24 11:00:20', ' 2023-10-24 13:30:30', ', '2023-10-24 15:45:45', ' 2023-10-25 09:15:00', ' 2023-10-25 11:45:15', ' 2023-10-25 14:00:25', ', '2023-10-26 08:45:30', ' 2023-10-26 10:30:40', ' 2023-10-26 13:15:50', ' 2023-10-27 09:30:00', ', '2023-10-27 12:00:10', ' 2023-10-27 14:45:20', ' 2023-10-28 10:15:30', ' 2023-10-28 13:00:45', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人故障表.维修状态 <CharField>
    # 
    if mcfieldnamezh == '维修状态':
        
        # 载入配置成功
        # 给出一些机器人故障表表中维修状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待维修', ' 维修中', ' 已修复', ' 待检查', ' 检查中', ' 检查完成', ' 待配件', ' 配件已订购', ' 配件已到货', ' 待安装', ' 安装中', ' 安装完成', ' 待测试', ' 测试中', ' 测试通过', ' 待客户确认', ' 客户已确认', ' 待返回', ' 已返回', ' 已关闭', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人故障表.维修时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '维修时间':
        
        # 载入配置成功
        # 给出一些机器人故障表表中维修时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:30:15', ' 2023-10-23 12:45:20', ' 2023-10-23 14:15:30', ', '2023-10-23 15:45:45', ' 2023-10-24 08:30:00', ' 2023-10-24 11:00:15', ' 2023-10-24 13:30:20', ', '2023-10-24 16:00:30', ' 2023-10-25 09:15:00', ' 2023-10-25 11:45:15', ' 2023-10-25 14:15:20', ', '2023-10-26 08:00:00', ' 2023-10-26 10:30:15', ' 2023-10-26 13:00:20', ' 2023-10-26 15:30:30', ', '2023-10-27 09:45:00', ' 2023-10-27 12:15:15', ' 2023-10-27 14:45:20', ' 2023-10-27 17:15:30', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人故障表.维修人员 <CharField>
    # 
    if mcfieldnamezh == '维修人员':
        
        # 载入配置成功
        # 给出一些机器人故障表表中维修人员的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'id', ' name', ' age', ' gender', ' phone_number', ' email', ' address', ' city', ' state', ' country', ' license_number', ' specialization', ' experience_years', ' hourly_rate', ' availability', ' last_training_date', ' equipment_handled', ' tools_owned', ' certifications', ' notes', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人故障表.故障严重程度 <CharField>
    # 
    if mcfieldnamezh == '故障严重程度':
        
        # 给出一些机器人故障表表中故障严重程度的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人故障表.关联组件 <SelectField>
    # 
    if mcfieldnamezh == '关联组件':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 维修记录表
    
    # 维修记录表.记录ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '记录ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 维修记录表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 维修记录表.维修日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '维修日期':
        
        # 载入配置成功
        # 给出一些维修记录表表中维修日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 维修记录表.维修类型 <CharField>
    # 
    if mcfieldnamezh == '维修类型':
        
        # 载入配置成功
        # 给出一些维修记录表表中维修类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '电器维修', '汽车维修', '空调维修', '电脑维修', '手机维修', '家具维修', '水管维修', '门窗维修', '灯具维修', '洗衣机维修', '冰箱维修', '电视维修', '热水器维修', '厨房设备维修', '自行车维修', '钟表维修', '眼镜维修', '珠宝维修', '鞋类维修', '乐器维修', '
    ))

        val = loadvalue
        
        return val
    
    # 维修记录表.问题描述 <TextField>
    # 
    if mcfieldnamezh == '问题描述':
        
        # 载入配置成功
        # 给出一些维修记录表表中问题描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一个简单的问题描述示例，', ', '用户遇到了登录问题，需要协助。', ', '软件在运行时崩溃，请调查。', ', '页面加载缓慢，需要优化。', ', '数据导入失败，请检查文件格式。', ', '订单状态不正确，显示已发货但实际未发。', ', '支付成功后未收到确认邮件。', ', '产品图片在网站上显示不正确。', ', '搜索功能无法找到相关结果。', ', '用户反馈应用内存在广告过多。', ', '购物车内的商品数量与实际不符。', ', '注册时收到重复验证码。', ', '密码重置链接无法正常工作。', ', '请求添加新的商品分类。', ', '用户希望增加夜间模式功能。', ', '应用内存在闪退现象。', ', '希望添加多语言支持。', ', '订单详情页面显示不完整。', ', '用户反馈支付流程过于复杂。', ', '希望增加商品评价功能。'
    ))

        val = loadvalue
        
        return val
    
    # 维修记录表.维修状态 <CharField>
    # 
    if mcfieldnamezh == '维修状态':
        
        # 载入配置成功
        # 给出一些维修记录表表中维修状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待维修', ' 维修中', ' 已修复', ' 待检查', ' 检查中', ' 检查完成', ' 待配件', ' 配件已订购', ' 配件已到货', ' 待安装', ' 安装中', ' 安装完成', ' 待测试', ' 测试中', ' 测试通过', ' 待客户确认', ' 客户已确认', ' 待返回', ' 已返回', ' 已关闭', '
    ))

        val = loadvalue
        
        return val
    
    # 维修记录表.技术员ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '技术员ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 维修记录表.维修费用 <CharField>
    # 
    if mcfieldnamezh == '维修费用':
        
        # 载入配置成功
        # 给出一些维修记录表表中维修费用的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '100元', ' 250元', ' 300.5元', ' 450元', ' 500.25元', ' 600元', ' 750.75元', ' 800元', ' 900.99元', ' 1050元', ' 1100.1元', ' 1200元', ' 1350元', ' 1400.5元', ' 1500元', ' 1600.25元', ' 1700元', ' 1850元', ' 1900.99元', ' 2000元', '
    ))

        val = loadvalue
        
        return val
    
    # 维修记录表.维修时长 <CharField>
    # 
    if mcfieldnamezh == '维修时长':
        
        # 给出一些维修记录表表中维修时长的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 维修记录表.相关部件 <CharField>
    # 
    if mcfieldnamezh == '相关部件':
        
        # 载入配置成功
        # 给出一些维修记录表表中相关部件的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '部件1', ' 部件2', ' 部件3', ' 部件4', ' 部件5', ' 部件6', ' 部件7', ' 部件8', ' 部件9', ' 部件10', ' 部件11', ' 部件12', ' 部件13', ' 部件14', ' 部件15', ' 部件16', ' 部件17', ' 部件18', ' 部件19', ' 部件20', '
    ))

        val = loadvalue
        
        return val
    
    
    # 机器人型号表
    
    # 机器人型号表.机器人型号ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人型号ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人型号表.机器人型号名称 <CharField>
    # 
    if mcfieldnamezh == '机器人型号名称':
        
        # 给出一些机器人型号表表中机器人型号名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人型号表.制造商 <CharField>
    # 
    if mcfieldnamezh == '制造商':
        
        # 载入配置成功
        # 给出一些机器人型号表表中制造商的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Apple', ' Samsung', ' Huawei', ' Xiaomi', ' OPPO', ' Vivo', ' LG', ' Sony', ' Motorola', ' Realme', ' OnePlus', ' Nokia', ' HTC', ' Lenovo', ' Meizu', ' Asus', ' Tecno', ' Infinix', ' ZTE', ' Honor', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人型号表.生产年份 <CharField>
    # 
    if mcfieldnamezh == '生产年份':
        
        # 载入配置成功
        # 给出一些机器人型号表表中生产年份的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2020', ' 2021', ' 2022', ' 2023', ' 2024', ' 2025', ' 2026', ' 2027', ' 2028', ' 2029', ' 2030', ' 2031', ' 2032', ' 2033', ' 2034', ' 2035', ' 2036', ' 2037', ' 2038', ' 2039', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人型号表.最大负载能力 <CharField>
    # 
    if mcfieldnamezh == '最大负载能力':
        
        # 给出一些机器人型号表表中最大负载能力的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人型号表.工作电压 <CharField>
    # 
    if mcfieldnamezh == '工作电压':
        
        # 给出一些机器人型号表表中工作电压的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人型号表.连接类型 <CharField>
    # 
    if mcfieldnamezh == '连接类型':
        
        # 载入配置成功
        # 给出一些机器人型号表表中连接类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Direct', ' VPN', ' SSH Tunnel', ' WAN', ' LAN', ' Wireless', ' Bluetooth', ' Serial', ' USB', ' Fiber', ' Ethernet', ' 4G/LTE', ' 5G', ' Wi-Fi', ' Wi-Fi Direct', ' WiMAX', ' Satellite', ' ADSL', ' VDSL', ' SD-WAN', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人型号表.安全认证 <CharField>
    # 
    if mcfieldnamezh == '安全认证':
        
        # 给出一些机器人型号表表中安全认证的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人型号表.维护周期 <CharField>
    # 
    if mcfieldnamezh == '维护周期':
        
        # 载入配置成功
        # 给出一些机器人型号表表中维护周期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '每日', ' 每周', ' 每两周', ' 每月', ' 每季度', ' 每半年', ' 每年', ' 每两年', ' 每三年', ' 每四年', ' 每五年', ' 每工作日', ' 每周末', ' 每周一', ' 每周二', ' 每周三', ' 每周四', ' 每周五', ' 每周六', ' 每周日', ' 自定义', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人型号表.相关组件ID关联字段指向其他如组件 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '相关组件ID关联字段指向其他如组件':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 传感器信息表
    
    # 传感器信息表.传感器ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '传感器ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 传感器信息表.传感器名称 <CharField>
    # 
    if mcfieldnamezh == '传感器名称':
        
        # 载入配置成功
        # 给出一些传感器信息表表中传感器名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '传感器1', '传感器2', '传感器3', '传感器4', '传感器5', '传感器6', '传感器7', '传感器8', '传感器9', '传感器10', '传感器11', '传感器12', '传感器13', '传感器14', '传感器15', '传感器16', '传感器17', '传感器18', '传感器19', '传感器20', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.传感器类型 <CharField>
    # 
    if mcfieldnamezh == '传感器类型':
        
        # 载入配置成功
        # 给出一些传感器信息表表中传感器类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '温度传感器', '湿度传感器', '压力传感器', '光照传感器', '加速度传感器', '陀螺仪传感器', '气体传感器', '声音传感器', '振动传感器', '位移传感器', '力传感器', '磁场传感器', '接近传感器', '距离传感器', '速度传感器', '流量传感器', '液位传感器', 'PH值传感器', '重量传感器', '电压传感器', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.位置 <CharField>
    # 
    if mcfieldnamezh == '位置':
        
        # 载入配置成功
        # 给出一些传感器信息表表中位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波', ', 'SELECT * FROM locations WHERE position IN (北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波);'
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.状态 <CharField>
    # 
    if mcfieldnamezh == '状态':
        
        # 载入配置成功
        # 给出一些传感器信息表表中状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待处理', '已处理', '处理中', '已完成', '已取消', '待审核', '审核通过', '审核失败', '待发货', '已发货', '运输中', '已签收', '退货中', '已退货', '退款中', '已退款', '待支付', '已支付', '支付失败', '未知状态', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.最后更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后更新时间':
        
        # 载入配置成功
        # 给出一些传感器信息表表中最后更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:15:30', ' 2023-10-22 14:20:45', ' 2023-10-21 21:35:12', ' 2023-10-20 12:40:09', ', '2023-10-19 17:55:26', ' 2023-10-18 08:10:43', ' 2023-10-17 13:25:58', ' 2023-10-16 18:40:15', ', '2023-10-15 23:55:32', ' 2023-10-14 04:10:49', ' 2023-10-13 09:25:06', ' 2023-10-12 14:40:23', ', '2023-10-11 19:55:40', ' 2023-10-10 00:10:57', ' 2023-10-09 05:25:14', ' 2023-10-08 10:40:31', ', '2023-10-07 15:55:48', ' 2023-10-06 21:10:05', ' 2023-10-05 02:25:22', ' 2023-10-04 07:40:39', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.测量值 <CharField>
    # 
    if mcfieldnamezh == '测量值':
        
        # 载入配置成功
        # 给出一些传感器信息表表中测量值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '测量值1', '测量值2', '测量值3', '测量值4', '测量值5', '测量值6', '测量值7', '测量值8', '测量值9', '测量值10', '测量值11', '测量值12', '测量值13', '测量值14', '测量值15', '测量值16', '测量值17', '测量值18', '测量值19', '测量值20', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.单位 <CharField>
    # 
    if mcfieldnamezh == '单位':
        
        # 载入配置成功
        # 给出一些传感器信息表表中单位的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '单位1', '单位2', '单位3', '单位4', '单位5', '单位6', '单位7', '单位8', '单位9', '单位10', '单位11', '单位12', '单位13', '单位14', '单位15', '单位16', '单位17', '单位18', '单位19', '单位20', ', 'SELECT * FROM 表名 WHERE 单位字段 IN (单位1', '单位2', '单位3', '单位4', '单位5', '单位6', '单位7', '单位8', '单位9', '单位10', '单位11', '单位12', '单位13', '单位14', '单位15', '单位16', '单位17', '单位18', '单位19', '单位20);'
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.报警阈值 <CharField>
    # 
    if mcfieldnamezh == '报警阈值':
        
        # 载入配置成功
        # 给出一些传感器信息表表中报警阈值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '阈值1', ' 阈值2', ' 阈值3', ' 阈值4', ' 阈值5', ' 阈值6', ' 阈值7', ' 阈值8', ' 阈值9', ' 阈值10', ' 阈值11', ' 阈值12', ' 阈值13', ' 阈值14', ' 阈值15', ' 阈值16', ' 阈值17', ' 阈值18', ' 阈值19', ' 阈值20', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器信息表.关联机器人ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 传感器数据表
    
    # 传感器数据表.传感器ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '传感器ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 传感器数据表.时间戳 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '时间戳':
        
        # 载入配置成功
        # 给出一些传感器数据表表中时间戳的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 12:00:15', ' 2023-10-23 13:45:20', ' 2023-10-23 15:15:00', ' 2023-10-23 16:30:15', ' 2023-10-23 18:00:30', ' 2023-10-23 19:15:45', ' 2023-10-23 20:30:00', ' 2023-10-23 21:45:15', ' 2023-10-23 23:00:00', ' 2023-10-24 00:15:30', ' 2023-10-24 01:30:45', ' 2023-10-24 03:00:15', ' 2023-10-24 04:45:20', ' 2023-10-24 06:15:00', ' 2023-10-24 07:30:15', ' 2023-10-24 08:45:30', ' 2023-10-24 10:00:00', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器数据表.温度 <CharField>
    # 
    if mcfieldnamezh == '温度':
        
        # 载入配置成功
        # 给出一些传感器数据表表中温度的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '25.5', ' 30.2', ' 22.8', ' 28.9', ' 26.1', ' 29.5', ' 24.3', ' 27.7', ' 31.0', ' 23.6', ' 29.2', ' 27.1', ' 25.9', ' 28.5', ' 26.7', ' 30.8', ' 24.9', ' 27.3', ' 29.8', ' 26.4', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器数据表.湿度 <CharField>
    # 
    if mcfieldnamezh == '湿度':
        
        # 载入配置成功
        # 给出一些传感器数据表表中湿度的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '55%', ' 62%', ' 48%', ' 71%', ' 59%', ' 68%', ' 49%', ' 75%', ' 61%', ' 52%', ' 64%', ' 50%', ' 73%', ' 60%', ' 57%', ' 66%', ' 51%', ' 70%', ' 63%', ' 56%', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器数据表.压力 <CharField>
    # 
    if mcfieldnamezh == '压力':
        
        # 载入配置成功
        # 给出一些传感器数据表表中压力的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '压力1', ' 压力2', ' 压力3', ' 压力4', ' 压力5', ' 压力6', ' 压力7', ' 压力8', ' 压力9', ' 压力10', ' 压力11', ' 压力12', ' 压力13', ' 压力14', ' 压力15', ' 压力16', ' 压力17', ' 压力18', ' 压力19', ' 压力20', '
    ))

        val = loadvalue
        
        return val
    
    # 传感器数据表.振动强度 <CharField>
    # 
    if mcfieldnamezh == '振动强度':
        
        # 给出一些传感器数据表表中振动强度的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 传感器数据表.状态如正常、异常 <CharField>
    # 
    if mcfieldnamezh == '状态如正常、异常':
        
        # 给出一些传感器数据表表中状态如正常、异常的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 传感器数据表.位置 <CharField>
    # 
    if mcfieldnamezh == '位置':
        
        # 载入配置成功
        # 给出一些传感器数据表表中位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波', ', 'SELECT * FROM locations WHERE position IN (北京', '上海', '广州', '深圳', '杭州', '成都', '重庆', '武汉', '西安', '南京', ', '天津', '苏州', '长沙', '郑州', '东莞', '青岛', '济南', '沈阳', '合肥', '宁波);'
    ))

        val = loadvalue
        
        return val
    
    # 传感器数据表.设备ID关联字段指向产生数据的设备 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '设备ID关联字段指向产生数据的设备':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 监控摄像头信息表
    
    # 监控摄像头信息表.摄像头ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '摄像头ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 监控摄像头信息表.摄像头名称 <CharField>
    # 
    if mcfieldnamezh == '摄像头名称':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中摄像头名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '摄像头1', ' 摄像头2', ' 摄像头3', ' 摄像头4', ' 摄像头5', ' 摄像头6', ' 摄像头7', ' 摄像头8', ' 摄像头9', ' 摄像头10', ' 摄像头11', ' 摄像头12', ' 摄像头13', ' 摄像头14', ' 摄像头15', ' 摄像头16', ' 摄像头17', ' 摄像头18', ' 摄像头19', ' 摄像头20', '
    ))

        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.安装位置 <CharField>
    # 
    if mcfieldnamezh == '安装位置':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中安装位置的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '室内墙面', ' 室外地面', ' 屋顶', ' 地下室', ' 设备间', ' 机房', ' 厨房', ' 卫生间', ' 阳台', ' 走廊', ' 办公室', ' 仓库', ' 车间', ' 工厂外部', ' 户外灯杆', ' 花园', ' 游泳池旁', ' 停车场', ' 电梯井', ' 空调外机位', '
    ))

        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.地址 <TextField>
    # 
    if mcfieldnamezh == '地址':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '北京市朝阳区三里屯路1号', ' 上海市浦东新区世纪大道100号', ' 广州市天河区珠江新城华夏路8号', ' 深圳市福田区福华三路88号', ' 杭州市西湖区文三路478号', ' 成都市锦江区红星路二段99号', ' 重庆市渝中区解放碑步行街1号', ' 天津市和平区南京路123号', ' 北京市西城区金融大街1号', ' 上海市黄浦区南京东路200号', ' 广州市越秀区中山五路33号', ' 深圳市罗湖区深南东路5002号', ' 杭州市拱墅区莫干山路111号', ' 南京市秦淮区中山南路89号', ' 武汉市江汉区解放大道688号', ' 西安市碑林区南大街1号', ' 沈阳市和平区中山路123号', ' 长沙市天心区黄兴南路步行街88号', ' 青岛市市南区香港中路10号', ' 厦门市思明区中山路步行街1号', '
    ))

        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.端口号 <CharField>
    # 
    if mcfieldnamezh == '端口号':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中端口号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '8080', ' 80', ' 443', ' 22', ' 21', ' 3306', ' 5432', ' 1433', ' 9092', ' 6379', ' 111', ' 25', ' 1521', ' 5672', ' 6380', ' 5900', ' 10000', ' 10001', ' 10002', ' 10003', '
    ))

        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.分辨率 <CharField>
    # 
    if mcfieldnamezh == '分辨率':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中分辨率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '1920x1080', ' 1366x768', ' 1280x800', ' 1600x900', ' 1440x900', ' 1024x768', ' 800x600', ' 3840x2160', ' 2560x1440', ' 2048x1152', ' 1680x1050', ' 1280x720', ' 768x1366', ' 576x1024', ' 480x800', ' 320x240', ' 1080x1920', ' 900x1600', ' 720x1280', ' 640x480', '
    ))

        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.状态如在线、离线 <CharField>
    # 
    if mcfieldnamezh == '状态如在线、离线':
        
        # 给出一些监控摄像头信息表表中状态如在线、离线的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.最后检查时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后检查时间':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中最后检查时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '最后检查时间', ', '2023-10-23 15:45:30', '
    ))

        val = loadvalue
        
        return val
    
    # 监控摄像头信息表.连接机器人ID关联字段指向机器人信息 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '连接机器人ID关联字段指向机器人信息':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 监控摄像头信息表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些监控摄像头信息表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    
    # 视频录像表
    
    # 视频录像表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 视频录像表.视频文件路径 <FileField>
    # 
    if mcfieldnamezh == '视频文件路径':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 视频录像表.录像开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '录像开始时间':
        
        # 给出一些视频录像表表中录像开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 视频录像表.录像结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '录像结束时间':
        
        # 给出一些视频录像表表中录像结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 视频录像表.摄像头ID关联摄像头信息 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '摄像头ID关联摄像头信息':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 视频录像表.机器人ID关联机器人信息 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID关联机器人信息':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 视频录像表.录像状态如正常、异常、删除 <CharField>
    # 
    if mcfieldnamezh == '录像状态如正常、异常、删除':
        
        # 给出一些视频录像表表中录像状态如正常、异常、删除的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 视频录像表.录像分辨率 <CharField>
    # 
    if mcfieldnamezh == '录像分辨率':
        
        # 给出一些视频录像表表中录像分辨率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 视频录像表.录像时长秒 <CharField>
    # 
    if mcfieldnamezh == '录像时长秒':
        
        # 给出一些视频录像表表中录像时长秒的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 视频录像表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些视频录像表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    
    # 机器人操作日志表
    
    # 机器人操作日志表.日志ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '日志ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人操作日志表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人操作日志表.操作时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '操作时间':
        
        # 载入配置成功
        # 给出一些机器人操作日志表表中操作时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:00:00', ' 2023-10-23T10:15:30', ' 2023-10-23T12:45:15', ' 2023-10-23T14:30:00', ' 2023-10-23T16:15:45', ', '2023-10-24T08:00:00', ' 2023-10-24T09:30:15', ' 2023-10-24T11:15:00', ' 2023-10-24T13:00:45', ' 2023-10-24T14:45:30', ', '2023-10-25T07:30:00', ' 2023-10-25T09:15:15', ' 2023-10-25T11:00:30', ' 2023-10-25T12:45:45', ' 2023-10-25T14:30:00', ', '2023-10-26T08:15:00', ' 2023-10-26T10:00:15', ' 2023-10-26T11:45:30', ' 2023-10-26T13:30:45', ' 2023-10-26T15:15:00', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人操作日志表.操作类型 <CharField>
    # 
    if mcfieldnamezh == '操作类型':
        
        # 载入配置成功
        # 给出一些机器人操作日志表表中操作类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '创建', ' 更新', ' 删除', ' 查询', ' 导入', ' 导出', ' 备份', ' 恢复', ' 审核', ' 批准', ' 拒绝', ' 取消', ' 提交', ' 发布', ' 下架', ' 归档', ' 移动', ' 复制', ' 重命名', ' 修改权限', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人操作日志表.操作结果 <CharField>
    # 
    if mcfieldnamezh == '操作结果':
        
        # 载入配置成功
        # 给出一些机器人操作日志表表中操作结果的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '成功', '失败', '部分成功', '超时', '取消', '等待中', '处理中', '已拒绝', '已接受', '已提交', '已审核', '已批准', '已拒绝（原因：无效数据）', '已拒绝（原因：权限不足）', '已完成', '已退回', '已重新提交', '已暂停', '已恢复', '未知结果', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人操作日志表.操作员ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '操作员ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人操作日志表.错误代码 <CharField>
    # 
    if mcfieldnamezh == '错误代码':
        
        # 载入配置成功
        # 给出一些机器人操作日志表表中错误代码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'ERROR_001', ' ERROR_002', ' ERROR_003', ' ERROR_004', ' ERROR_005', ' ERROR_006', ' ERROR_007', ' ERROR_008', ' ERROR_009', ' ERROR_010', ' ERROR_011', ' ERROR_012', ' ERROR_013', ' ERROR_014', ' ERROR_015', ' ERROR_016', ' ERROR_017', ' ERROR_018', ' ERROR_019', ' ERROR_020', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人操作日志表.错误信息 <CharField>
    # 
    if mcfieldnamezh == '错误信息':
        
        # 载入配置成功
        # 给出一些机器人操作日志表表中错误信息的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '无效的输入值', ', '系统内部错误', ', '数据库连接失败', ', '文件上传失败', ', '用户认证失败', ', '请求超时', ', '权限不足', ', '参数缺失', ', '数据格式不正确', ', '资源不存在', ', '操作被禁止', ', '服务器繁忙', ', '网络错误', ', '会话已过期', ', '验证码错误', ', '重复的操作', ', '无效的API调用', ', '数据校验失败', ', '超出最大限制', ', '系统维护中'
    ))

        val = loadvalue
        
        return val
    
    # 机器人操作日志表.生产线ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产线ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 生产线效率统计表
    
    # 生产线效率统计表.生产线ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产线ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线效率统计表.效率率 <CharField>
    # 
    if mcfieldnamezh == '效率率':
        
        # 给出一些生产线效率统计表表中效率率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.日产量 <CharField>
    # 
    if mcfieldnamezh == '日产量':
        
        # 给出一些生产线效率统计表表中日产量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.停机时间小时 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '停机时间小时':
        
        # 给出一些生产线效率统计表表中停机时间小时的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.维护频率 <CharField>
    # 
    if mcfieldnamezh == '维护频率':
        
        # 给出一些生产线效率统计表表中维护频率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.上次维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上次维护日期':
        
        # 载入配置成功
        # 给出一些生产线效率统计表表中上次维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '上次维护日期:', ' 2023-10-23', ', 'INSERT INTO 表名 (上次维护日期) VALUES (2023-10-23);', 'SELECT 上次维护日期 FROM 表名;'
    ))

        val = loadvalue
        
        return val
    
    # 生产线效率统计表.机器人数量 <IntegerField>
    # 
    if mcfieldnamezh == '机器人数量':
        
        # 给出一些生产线效率统计表表中机器人数量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.操作人员数量 <IntegerField>
    # 
    if mcfieldnamezh == '操作人员数量':
        
        # 给出一些生产线效率统计表表中操作人员数量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.产品缺陷率 <CharField>
    # 
    if mcfieldnamezh == '产品缺陷率':
        
        # 给出一些生产线效率统计表表中产品缺陷率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线效率统计表.关联车间ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联车间ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 机器人固件更新表
    
    # 机器人固件更新表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人固件更新表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人固件更新表.固件版本号 <CharField>
    # 
    if mcfieldnamezh == '固件版本号':
        
        # 给出一些机器人固件更新表表中固件版本号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人固件更新表.更新日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新日期':
        
        # 载入配置成功
        # 给出一些机器人固件更新表表中更新日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-24', ' 2023-10-25', ' 2023-10-26', ' 2023-10-27', ' 2023-10-28', ' 2023-10-29', ' 2023-10-30', ' 2023-10-31', ' 2023-11-01', ' 2023-11-02', ' 2023-11-03', ' 2023-11-04', ' 2023-11-05', ' 2023-11-06', ' 2023-11-07', ' 2023-11-08', ' 2023-11-09', ' 2023-11-10', ' 2023-11-11', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件更新表.更新状态 <CharField>
    # 
    if mcfieldnamezh == '更新状态':
        
        # 载入配置成功
        # 给出一些机器人固件更新表表中更新状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待审核', ' 审核中', ' 审核通过', ' 审核拒绝', ' 已提交', ' 处理中', ' 已完成', ' 已取消', ' 待支付', ' 支付成功', ' 支付失败', ' 已发货', ' 运输中', ' 已签收', ' 退货中', ' 退货成功', ' 退货失败', ' 部分退款', ' 全额退款', ' 重新提交', ', '待审核', ' 审核中', ' 审核通过', ' 审核拒绝', ' 已提交', ' 处理中', ' 已完成', ' 已取消', ' 待支付', ' 支付成功', ' 支付失败', ' 已发货', ' 运输中', ' 已签收', ' 退货中', ' 退货成功', ' 退货失败', ' 部分退款', ' 全额退款', ' 重新提交', '  -- 注意这里有两个逗号，但通常不推荐这样做'
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件更新表.更新描述 <TextField>
    # 
    if mcfieldnamezh == '更新描述':
        
        # 载入配置成功
        # 给出一些机器人固件更新表表中更新描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述，可能更长一些', ' 字段3的简单描述', ' 字段4的特定用途', ' 字段5的详细解释', ', 'CREATE TABLE example_table (', 'field1 INT COMMENT 字段1描述', ', 'field2 VARCHAR(255) COMMENT 字段2描述，可能更长一些', ', 'field3 DATE COMMENT 字段3的简单描述', ', 'field4 BOOLEAN COMMENT 字段4的特定用途', ', 'field5 TEXT COMMENT 字段5的详细解释', ');'
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件更新表.前固件版本号 <CharField>
    # 
    if mcfieldnamezh == '前固件版本号':
        
        # 给出一些机器人固件更新表表中前固件版本号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人固件更新表.更新者 <CharField>
    # 
    if mcfieldnamezh == '更新者':
        
        # 载入配置成功
        # 给出一些机器人固件更新表表中更新者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'user1', ' user2', ' user3', ' user4', ' user5', ' user6', ' user7', ' user8', ' user9', ' user10', ' user11', ' user12', ' user13', ' user14', ' user15', ' user16', ' user17', ' user18', ' user19', ' user20', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件更新表.是否成功 <BooleanField>
    # 
    if mcfieldnamezh == '是否成功':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 机器人固件更新表.失败原因 <CharField>
    # 
    if mcfieldnamezh == '失败原因':
        
        # 载入配置成功
        # 给出一些机器人固件更新表表中失败原因的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '网络连接错误', ' 服务器超时', ' 数据库连接失败', ' 文件读取错误', ' 权限不足', ' 参数错误', ' 无效的输入', ' 系统崩溃', ' 内存不足', ' 磁盘空间不足', ' 依赖服务未启动', ' 第三方API调用失败', ' 认证失败', ' 配置错误', ' 代码逻辑错误', ' 资源不存在', ' 请求超时', ' 加密错误', ' 数据格式错误', ' 未知错误', '
    ))

        val = loadvalue
        
        return val
    
    
    # 机器人固件版本表
    
    # 机器人固件版本表.固件ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '固件ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人固件版本表.固件版本号 <CharField>
    # 
    if mcfieldnamezh == '固件版本号':
        
        # 给出一些机器人固件版本表表中固件版本号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人固件版本表.发布日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '发布日期':
        
        # 载入配置成功
        # 给出一些机器人固件版本表表中发布日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ', '2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ', '2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ', '2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件版本表.制造商 <CharField>
    # 
    if mcfieldnamezh == '制造商':
        
        # 载入配置成功
        # 给出一些机器人固件版本表表中制造商的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Apple', ' Samsung', ' Huawei', ' Xiaomi', ' OPPO', ' Vivo', ' LG', ' Sony', ' Motorola', ' Realme', ' OnePlus', ' Nokia', ' HTC', ' Lenovo', ' Meizu', ' Asus', ' Tecno', ' Infinix', ' ZTE', ' Honor', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件版本表.兼容性说明 <CharField>
    # 
    if mcfieldnamezh == '兼容性说明':
        
        # 载入配置成功
        # 给出一些机器人固件版本表表中兼容性说明的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '与Windows 10', ' macOS 11', ' Linux Ubuntu 20.04兼容，', ', '支持iOS 14及以上版本，', ', '与Android 10及以上版本兼容，', ', '兼容Chrome', ' Firefox', ' Safari浏览器，', ', '与MySQL 5.7', ' 8.0数据库兼容，', ', '支持PostgreSQL 12', ' 13版本，', ', '与Microsoft Office 2019', ' 365兼容，', ', '兼容Adobe Photoshop 2021', ' 2022版本，', ', '支持AutoCAD 2020', ' 2021软件，', ', '与Microsoft Excel 2016', ' 2019', ' 365兼容，', ', '兼容Microsoft Word 2016', ' 2019', ' 365版本，', ', '支持PowerPoint 2019', ' 365演示文稿软件，', ', '与Java 8', ' 11', ' 17运行环境兼容，', ', '支持Python 3.7', ' 3.8', ' 3.9版本，', ', '与Node.js 14', ' 16', ' 18版本兼容，', ', '兼容Docker 19.03', ' 20.10容器技术，', ', '支持Kubernetes 1.18', ' 1.20', ' 1.22集群管理，', ', '与AWS S3', ' Google Cloud Storage兼容存储服务，', ', '支持RESTful API接口，', ', '兼容SOAP协议'
    ))

        val = loadvalue
        
        return val
    
    # 机器人固件版本表.文件大小 <FileField>
    # 
    if mcfieldnamezh == '文件大小':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人固件版本表.下载链接 <URLField>
    # 
    if mcfieldnamezh == '下载链接':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人固件版本表.固件描述 <TextField>
    # 
    if mcfieldnamezh == '固件描述':
        
        # 给出一些机器人固件版本表表中固件描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人固件版本表.机器人模型ID关联字段 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人模型ID关联字段':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人固件版本表.是否为最新版本 <BooleanField>
    # 
    if mcfieldnamezh == '是否为最新版本':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    
    # 生产线安全规则表
    
    # 生产线安全规则表.规则ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '规则ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线安全规则表.规则名称 <CharField>
    # 
    if mcfieldnamezh == '规则名称':
        
        # 载入配置成功
        # 给出一些生产线安全规则表表中规则名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '规则1', ' 规则2', ' 规则3', ' 规则4', ' 规则5', ' 规则6', ' 规则7', ' 规则8', ' 规则9', ' 规则10', ' 规则11', ' 规则12', ' 规则13', ' 规则14', ' 规则15', ' 规则16', ' 规则17', ' 规则18', ' 规则19', ' 规则20', ', 'SELECT * FROM your_table WHERE 规则名称 IN (规则1', ' 规则2', ' 规则3', ' 规则4', ' 规则5', ' 规则6', ' 规则7', ' 规则8', ' 规则9', ' 规则10', ' 规则11', ' 规则12', ' 规则13', ' 规则14', ' 规则15', ' 规则16', ' 规则17', ' 规则18', ' 规则19', ' 规则20);'
    ))

        val = loadvalue
        
        return val
    
    # 生产线安全规则表.生产线ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产线ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线安全规则表.规则描述 <TextField>
    # 
    if mcfieldnamezh == '规则描述':
        
        # 载入配置成功
        # 给出一些生产线安全规则表表中规则描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '描述1', ' 描述2', ' 这是一个示例描述', ' 规则详细说明', ' 限制条件1', ' 条件2的描述', ' 用户行为规则', ' 数据验证规则', ' 时间限制规则', ' 安全访问规则', ' 系统配置规则', ' 业务逻辑规则', ' 数据完整性规则', ' 数据格式规则', ' 输入验证规则', ' 输出格式规则', ' 异常处理规则', ' 日志记录规则', ' 备份恢复规则', ' 其他自定义规则', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线安全规则表.严重等级 <CharField>
    # 
    if mcfieldnamezh == '严重等级':
        
        # 载入配置成功
        # 给出一些生产线安全规则表表中严重等级的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '低', ' 较低', ' 中低', ' 中', ' 中偏高', ' 高', ' 较高', ' 非常高', ' 紧急', ' 严重', ' 危急', ' 灾难性', ' 致命', ' 一级', ' 二级', ' 三级', ' 四级', ' 五级', ' 六级', ' 七级', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线安全规则表.检测方式 <CharField>
    # 
    if mcfieldnamezh == '检测方式':
        
        # 给出一些生产线安全规则表表中检测方式的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线安全规则表.报警阈值 <CharField>
    # 
    if mcfieldnamezh == '报警阈值':
        
        # 载入配置成功
        # 给出一些生产线安全规则表表中报警阈值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '阈值1', ' 阈值2', ' 阈值3', ' 阈值4', ' 阈值5', ' 阈值6', ' 阈值7', ' 阈值8', ' 阈值9', ' 阈值10', ' 阈值11', ' 阈值12', ' 阈值13', ' 阈值14', ' 阈值15', ' 阈值16', ' 阈值17', ' 阈值18', ' 阈值19', ' 阈值20', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线安全规则表.报警接收人 <CharField>
    # 
    if mcfieldnamezh == '报警接收人':
        
        # 给出一些生产线安全规则表表中报警接收人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线安全规则表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些生产线安全规则表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 生产线安全规则表.修改时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '修改时间':
        
        # 载入配置成功
        # 给出一些生产线安全规则表表中修改时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:00:00Z', ' 2023-10-23T09:15:30Z', ' 2023-10-23T09:30:45Z', ' 2023-10-23T09:45:15Z', ', '2023-10-23T10:00:00Z', ' 2023-10-23T10:15:30Z', ' 2023-10-23T10:30:45Z', ' 2023-10-23T10:45:15Z', ', '2023-10-23T11:00:00Z', ' 2023-10-23T11:15:30Z', ' 2023-10-23T11:30:45Z', ' 2023-10-23T11:45:15Z', ', '2023-10-23T12:00:00Z', ' 2023-10-23T12:15:30Z', ' 2023-10-23T12:30:45Z', ' 2023-10-23T12:45:15Z', ', '2023-10-23T13:00:00Z', ' 2023-10-23T13:15:30Z', ' 2023-10-23T13:30:45Z', ' 2023-10-23T13:45:15Z', '
    ))

        val = loadvalue
        
        return val
    
    
    # 机器人安全配置表
    
    # 机器人安全配置表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人安全配置表.安全等级 <CharField>
    # 
    if mcfieldnamezh == '安全等级':
        
        # 载入配置成功
        # 给出一些机器人安全配置表表中安全等级的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Level1', ' Level2', ' Level3', ' High', ' Medium', ' Low', ' Confidential', ' Secret', ' TopSecret', ' Unclassified', ' Sensitive', ' VeryHigh', ' VeryLow', ' Restricted', ' General', ' Emergency', ' Critical', ' Alert', ' Monitored', ' Unmonitored', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人安全配置表.警报阈值 <CharField>
    # 
    if mcfieldnamezh == '警报阈值':
        
        # 给出一些机器人安全配置表表中警报阈值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人安全配置表.紧急停止码 <CharField>
    # 
    if mcfieldnamezh == '紧急停止码':
        
        # 给出一些机器人安全配置表表中紧急停止码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人安全配置表.维护间隔 <CharField>
    # 
    if mcfieldnamezh == '维护间隔':
        
        # 给出一些机器人安全配置表表中维护间隔的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人安全配置表.上次维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上次维护日期':
        
        # 载入配置成功
        # 给出一些机器人安全配置表表中上次维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '上次维护日期:', ' 2023-10-23', ', 'INSERT INTO 表名 (上次维护日期) VALUES (2023-10-23);', 'SELECT 上次维护日期 FROM 表名;'
    ))

        val = loadvalue
        
        return val
    
    # 机器人安全配置表.运行状态 <CharField>
    # 
    if mcfieldnamezh == '运行状态':
        
        # 给出一些机器人安全配置表表中运行状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人安全配置表.故障历史 <CharField>
    # 
    if mcfieldnamezh == '故障历史':
        
        # 给出一些机器人安全配置表表中故障历史的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人安全配置表.关联工作站ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联工作站ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 机器人巡检计划表
    
    # 机器人巡检计划表.计划ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '计划ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人巡检计划表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人巡检计划表.开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '开始时间':
        
        # 载入配置成功
        # 给出一些机器人巡检计划表表中开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01 00:00:00', ' 2023-01-02 12:34:56', ' 2023-01-03 23:59:59', ', '2023-01-04 08:00:00', ' 2023-01-05 14:15:16', ' 2023-01-06 09:30:00', ', '2023-01-07 11:00:00', ' 2023-01-08 17:45:00', ' 2023-01-09 10:20:30', ', '2023-01-10 19:00:00', ' 2023-01-11 13:15:45', ' 2023-01-12 22:45:00', ', '2023-01-13 01:30:00', ' 2023-01-14 16:00:00', ' 2023-01-15 04:45:00', ', '2023-01-16 18:30:00', ' 2023-01-17 07:15:00', ' 2023-01-18 20:45:00', ', '2023-01-19 06:00:00', ' 2023-01-20 15:00:00', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '结束时间':
        
        # 载入配置成功
        # 给出一些机器人巡检计划表表中结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 10:00:00', ' 2023-10-23 12:30:15', ' 2023-10-23 15:45:30', ' 2023-10-24 08:15:00', ', '2023-10-24 11:00:45', ' 2023-10-24 13:30:15', ' 2023-10-25 09:45:30', ' 2023-10-25 12:15:00', ', '2023-10-25 14:45:15', ' 2023-10-26 10:30:00', ' 2023-10-26 13:00:45', ' 2023-10-26 15:30:15', ', '2023-10-27 08:45:30', ' 2023-10-27 11:15:00', ' 2023-10-27 13:45:45', ' 2023-10-28 09:30:15', ', '2023-10-28 12:00:30', ' 2023-10-28 14:30:00', ' 2023-10-29 10:15:45', ' 2023-10-29 12:45:15'
    ))

        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.巡检频率 <CharField>
    # 
    if mcfieldnamezh == '巡检频率':
        
        # 给出一些机器人巡检计划表表中巡检频率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.巡检区域 <CharField>
    # 
    if mcfieldnamezh == '巡检区域':
        
        # 给出一些机器人巡检计划表表中巡检区域的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.计划状态 <CharField>
    # 
    if mcfieldnamezh == '计划状态':
        
        # 载入配置成功
        # 给出一些机器人巡检计划表表中计划状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待开始', ' 进行中', ' 已暂停', ' 已恢复', ' 已完成', ' 已取消', ' 待审核', ' 审核通过', ' 审核拒绝', ' 待支付', ' 已支付', ' 支付失败', ' 待发货', ' 已发货', ' 已签收', ' 已退货', ' 已退款', ' 部分退款', ' 延期处理', ' 重新计划', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.创建者 <CharField>
    # 
    if mcfieldnamezh == '创建者':
        
        # 载入配置成功
        # 给出一些机器人巡检计划表表中创建者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ', 'Kevin', ' Laura', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Samuel', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.最后修改者 <CharField>
    # 
    if mcfieldnamezh == '最后修改者':
        
        # 载入配置成功
        # 给出一些机器人巡检计划表表中最后修改者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Kate', ' Lucas', ' Mia', ' Noah', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Thomas', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.最后修改时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改时间':
        
        # 载入配置成功
        # 给出一些机器人巡检计划表表中最后修改时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 15:45:30', ', '2023-10-23 15:45:30', ' 2023-10-24 09:10:20', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人巡检计划表.关联任务ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联任务ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 巡检结果表
    
    # 巡检结果表.巡检编号 <CharField>
    # 
    if mcfieldnamezh == '巡检编号':
        
        # 给出一些巡检结果表表中巡检编号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 巡检结果表.巡检时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '巡检时间':
        
        # 给出一些巡检结果表表中巡检时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 巡检结果表.机器人编号 <CharField>
    # 
    if mcfieldnamezh == '机器人编号':
        
        # 给出一些巡检结果表表中机器人编号的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 巡检结果表.安全状态 <CharField>
    # 
    if mcfieldnamezh == '安全状态':
        
        # 给出一些巡检结果表表中安全状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 巡检结果表.故障描述 <TextField>
    # 
    if mcfieldnamezh == '故障描述':
        
        # 载入配置成功
        # 给出一些巡检结果表表中故障描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '设备突然停止工作，无响应', ' 屏幕显示异常，出现花屏现象', ' 网络连接不稳定，频繁断开', ' 打印机无法打印，纸张卡住', ' 电源插头松动，设备无法开机', ' 软件崩溃，频繁出现错误提示', ' 键盘按键失灵，部分按键无反应', ' 鼠标移动不流畅，出现卡顿', ' 硬盘读写速度变慢，系统响应迟缓', ' 摄像头无法捕捉图像，黑屏', ' 音频输出异常，声音失真', ' USB接口无法识别设备', ' 蓝牙连接失败，无法配对', ' 显示器背光灯不亮', ' 系统更新后，部分功能无法使用', ' 电池电量消耗过快', ' 软件安装失败，提示未知错误', ' 触摸屏不灵敏，触摸无反应', ' 风扇噪音过大，影响使用', ' 无线网卡信号弱，连接不稳定', '
    ))

        val = loadvalue
        
        return val
    
    # 巡检结果表.维修状态 <CharField>
    # 
    if mcfieldnamezh == '维修状态':
        
        # 载入配置成功
        # 给出一些巡检结果表表中维修状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待维修', ' 维修中', ' 已修复', ' 待检查', ' 检查中', ' 检查完成', ' 待配件', ' 配件已订购', ' 配件已到货', ' 待安装', ' 安装中', ' 安装完成', ' 待测试', ' 测试中', ' 测试通过', ' 待客户确认', ' 客户已确认', ' 待返回', ' 已返回', ' 已关闭', '
    ))

        val = loadvalue
        
        return val
    
    # 巡检结果表.巡检员 <CharField>
    # 
    if mcfieldnamezh == '巡检员':
        
        # 给出一些巡检结果表表中巡检员的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 巡检结果表.维修人员 <CharField>
    # 
    if mcfieldnamezh == '维修人员':
        
        # 载入配置成功
        # 给出一些巡检结果表表中维修人员的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'id', ' name', ' age', ' gender', ' phone_number', ' email', ' address', ' city', ' state', ' country', ' license_number', ' specialization', ' experience_years', ' hourly_rate', ' availability', ' last_training_date', ' equipment_handled', ' tools_owned', ' certifications', ' notes', '
    ))

        val = loadvalue
        
        return val
    
    # 巡检结果表.维修时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '维修时间':
        
        # 载入配置成功
        # 给出一些巡检结果表表中维修时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:30:15', ' 2023-10-23 12:45:20', ' 2023-10-23 14:15:30', ', '2023-10-23 15:45:45', ' 2023-10-24 08:30:00', ' 2023-10-24 11:00:15', ' 2023-10-24 13:30:20', ', '2023-10-24 16:00:30', ' 2023-10-25 09:15:00', ' 2023-10-25 11:45:15', ' 2023-10-25 14:15:20', ', '2023-10-26 08:00:00', ' 2023-10-26 10:30:15', ' 2023-10-26 13:00:20', ' 2023-10-26 15:30:30', ', '2023-10-27 09:45:00', ' 2023-10-27 12:15:15', ' 2023-10-27 14:45:20', ' 2023-10-27 17:15:30', '
    ))

        val = loadvalue
        
        return val
    
    
    # 机器人维护周期表
    
    # 机器人维护周期表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人维护周期表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人维护周期表.维护周期天数 <CharField>
    # 
    if mcfieldnamezh == '维护周期天数':
        
        # 给出一些机器人维护周期表表中维护周期天数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人维护周期表.上次维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上次维护日期':
        
        # 载入配置成功
        # 给出一些机器人维护周期表表中上次维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '上次维护日期:', ' 2023-10-23', ', 'INSERT INTO 表名 (上次维护日期) VALUES (2023-10-23);', 'SELECT 上次维护日期 FROM 表名;'
    ))

        val = loadvalue
        
        return val
    
    # 机器人维护周期表.下次维护日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '下次维护日期':
        
        # 载入配置成功
        # 给出一些机器人维护周期表表中下次维护日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-11-05', ' 2023-11-18', ' 2023-12-02', ' 2023-12-15', ' 2023-12-29', ' 2024-01-12', ' 2024-01-26', ' 2024-02-09', ' 2024-02-23', ' 2024-03-08', ' 2024-03-22', ' 2024-04-05', ' 2024-04-19', ' 2024-05-03', ' 2024-05-17', ' 2024-06-01', ' 2024-06-14', ' 2024-06-28', ' 2024-07-12', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人维护周期表.维护状态如待维护、维护中、已完成 <CharField>
    # 
    if mcfieldnamezh == '维护状态如待维护、维护中、已完成':
        
        # 给出一些机器人维护周期表表中维护状态如待维护、维护中、已完成的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人维护周期表.维护类型如常规检查、深度保养、故障修复 <CharField>
    # 
    if mcfieldnamezh == '维护类型如常规检查、深度保养、故障修复':
        
        # 给出一些机器人维护周期表表中维护类型如常规检查、深度保养、故障修复的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 机器人维护周期表.维护备注 <CharField>
    # 
    if mcfieldnamezh == '维护备注':
        
        # 载入配置成功
        # 给出一些机器人维护周期表表中维护备注的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '系统升级', ' 修复bug', ' 数据库优化', ' 增加新功能', ' 安全性增强', ' 界面美化', ' 性能调优', ' 数据迁移', ' 硬件升级', ' 软件更新', ' 备份恢复', ' 网络故障处理', ' 服务器维护', ' 磁盘扩容', ' 内存升级', ' CPU升级', ' 防火墙更新', ' 数据库备份', ' 数据清理', ' 日志分析', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人维护周期表.创建人 <CharField>
    # 
    if mcfieldnamezh == '创建人':
        
        # 载入配置成功
        # 给出一些机器人维护周期表表中创建人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Katherine', ' Lucas', ' Maria', ' Nathan', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Samuel', ' Tina', ', 'INSERT INTO your_table_name (creators) VALUES', '(Alice)', ', '(Bob)', ', '(Charlie)', ', '... -- 以此类推，为其他名称添加相应的值', '(Tina);'
    ))

        val = loadvalue
        
        return val
    
    # 机器人维护周期表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些机器人维护周期表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    
    # 生产线停机记录表
    
    # 生产线停机记录表.记录ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '记录ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线停机记录表.生产线ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '生产线ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线停机记录表.停机开始时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '停机开始时间':
        
        # 给出一些生产线停机记录表表中停机开始时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线停机记录表.停机结束时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '停机结束时间':
        
        # 给出一些生产线停机记录表表中停机结束时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线停机记录表.停机原因 <CharField>
    # 
    if mcfieldnamezh == '停机原因':
        
        # 给出一些生产线停机记录表表中停机原因的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线停机记录表.停机时长分钟 <CharField>
    # 
    if mcfieldnamezh == '停机时长分钟':
        
        # 给出一些生产线停机记录表表中停机时长分钟的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 生产线停机记录表.操作员ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '操作员ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线停机记录表.维修员ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '维修员ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 生产线停机记录表.是否已解决0未解决1已解决 <BooleanField>
    # 
    if mcfieldnamezh == '是否已解决0未解决1已解决':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 生产线停机记录表.备注 <CharField>
    # 
    if mcfieldnamezh == '备注':
        
        # 载入配置成功
        # 给出一些生产线停机记录表表中备注的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一个示例备注', '这是另一个备注', '第三个备注内容', '第四个简单的备注', '第五个长一点的备注内容', '第六个备注', '第七个备注信息', '第八个备注描述', '第九个备注', '第十个备注内容', '第十一个备注项', '第十二个备注', '第十三个备注信息', '第十四个备注描述', '第十五个备注', '第十六个备注内容', '第十七个备注项', '第十八个备注', '第十九个备注信息', '第二十个备注描述', '
    ))

        val = loadvalue
        
        return val
    
    
    # 机器人权限分配表
    
    # 机器人权限分配表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人权限分配表.机器人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '机器人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人权限分配表.权限ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '权限ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 机器人权限分配表.分配日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '分配日期':
        
        # 载入配置成功
        # 给出一些机器人权限分配表表中分配日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-24', ' 2023-10-25', ' 2023-10-26', ' 2023-10-27', ', '2023-10-28', ' 2023-10-29', ' 2023-10-30', ' 2023-10-31', ' 2023-11-01', ', '2023-11-02', ' 2023-11-03', ' 2023-11-04', ' 2023-11-05', ' 2023-11-06', ', '2023-11-07', ' 2023-11-08', ' 2023-11-09', ' 2023-11-10', ' 2023-11-11', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人权限分配表.过期日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '过期日期':
        
        # 载入配置成功
        # 给出一些机器人权限分配表表中过期日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-11-05', ' 2023-11-12', ' 2023-11-20', ' 2023-12-01', ' 2023-12-10', ' 2023-12-20', ' 2024-01-05', ' 2024-01-15', ' 2024-01-25', ' 2024-02-08', ' 2024-02-18', ' 2024-03-01', ' 2024-03-10', ' 2024-03-20', ' 2024-04-05', ' 2024-04-15', ' 2024-04-25', ' 2024-05-01', ' 2024-05-10', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人权限分配表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 机器人权限分配表.创建者 <CharField>
    # 
    if mcfieldnamezh == '创建者':
        
        # 载入配置成功
        # 给出一些机器人权限分配表表中创建者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ', 'Kevin', ' Laura', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Samuel', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人权限分配表.最后修改者 <CharField>
    # 
    if mcfieldnamezh == '最后修改者':
        
        # 载入配置成功
        # 给出一些机器人权限分配表表中最后修改者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Kate', ' Lucas', ' Mia', ' Noah', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Thomas', '
    ))

        val = loadvalue
        
        return val
    
    # 机器人权限分配表.部门ID关联字段 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID关联字段':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 系统管理员
    
    # 系统管理员.管理员姓名 <CharField>
    # 
    if mcfieldnamezh == '管理员姓名':
        
        # 载入配置成功
        # 给出一些系统管理员表中管理员姓名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '管理员姓名1', ' 管理员姓名2', ', '管理员姓名示例1', ' 管理员姓名2', '
    ))

        val = loadvalue
        
        return val
    
    
    return val




# 机器人信息表
def generate_robotinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotinfo'
    fields_en = ['`robotid`', '`robotname`', '`mokwkwdelnumber`', '`serialnumber`', '`manufacturedate`', '`lkwkwastmakwkwintenancedate`', '`operationalstatus`', '`location`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人名称 根据名称选择合适的函数来生成数据
        robotname = get(faker,'机器人名称')
        values.append('\''+str(robotname)+'\'')
        
        # 用于外键补充
        
        
        
        # 型号编号 根据名称选择合适的函数来生成数据
        mokwkwdelnumber = get(faker,'型号编号')
        values.append('\''+str(mokwkwdelnumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 序列号 根据名称选择合适的函数来生成数据
        serialnumber = get(faker,'序列号')
        values.append('\''+str(serialnumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产日期 根据名称选择合适的函数来生成数据
        manufacturedate = get(faker,'生产日期')
        values.append('\''+str(manufacturedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 最近维护日期 根据名称选择合适的函数来生成数据
        lkwkwastmakwkwintenancedate = get(faker,'最近维护日期')
        values.append('\''+str(lkwkwastmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 运行状态 根据名称选择合适的函数来生成数据
        operationalstatus = get(faker,'运行状态')
        values.append('\''+str(operationalstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 位置 根据名称选择合适的函数来生成数据
        location = get(faker,'位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 生产线信息表
def generate_productionlkwkwineinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='productionlkwkwineinfo'
    fields_en = ['`productionlkwkwineid`', '`productionlkwkwinename`', '`location`', '`creationdate`', '`isactive`', '`maxcapacity`', '`makwkwintenancecycle`', '`lkwkwastmakwkwintenancedate`', '`robotcount`', '`associatedfactkwkworyid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 生产线ID 根据名称选择合适的函数来生成数据
        productionlkwkwineid = get(faker,'生产线ID')
        values.append('\''+str(productionlkwkwineid)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线名称 根据名称选择合适的函数来生成数据
        productionlkwkwinename = get(faker,'生产线名称')
        values.append('\''+str(productionlkwkwinename)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线位置 根据名称选择合适的函数来生成数据
        location = get(faker,'生产线位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        creationdate = get(faker,'创建日期')
        values.append('\''+str(creationdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 最大产能 根据名称选择合适的函数来生成数据
        maxcapacity = get(faker,'最大产能')
        values.append('\''+str(maxcapacity)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护周期 根据名称选择合适的函数来生成数据
        makwkwintenancecycle = get(faker,'维护周期')
        values.append('\''+str(makwkwintenancecycle)+'\'')
        
        # 用于外键补充
        
        
        
        # 上次维护日期 根据名称选择合适的函数来生成数据
        lkwkwastmakwkwintenancedate = get(faker,'上次维护日期')
        values.append('\''+str(lkwkwastmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人数量 根据名称选择合适的函数来生成数据
        robotcount = get(faker,'机器人数量')
        values.append('\''+str(robotcount)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联工厂ID' not in cache:
            associatedfactkwkworyid = get(faker,'关联工厂ID')
        else:
            associatedfactkwkworyid = faker.random.choice(list(cache.get('关联工厂ID', )))
        
        # 用于外键补充
        
        if '关联工厂ID' not in cache:
            cache['关联工厂ID'] = set()
        cache['关联工厂ID'].add(associatedfactkwkworyid)
        values.append('\''+str(associatedfactkwkworyid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 安全监控日志表
def generate_safetymonitkwkworlog(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='safetymonitkwkworlog'
    fields_en = ['`logid`', '`deviceid`', '`robotid`', '`eventtype`', '`eventtime`', '`eventdescription`', '`severity`', '`actiontaken`', '`operatkwkworid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 日志ID 根据名称选择合适的函数来生成数据
        logid = get(faker,'日志ID')
        values.append('\''+str(logid)+'\'')
        
        # 用于外键补充
        
        
        
        # 设备ID 根据名称选择合适的函数来生成数据
        deviceid = get(faker,'设备ID')
        values.append('\''+str(deviceid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 事件类型 根据名称选择合适的函数来生成数据
        eventtype = get(faker,'事件类型')
        values.append('\''+str(eventtype)+'\'')
        
        # 用于外键补充
        
        
        
        # 事件发生时间 根据名称选择合适的函数来生成数据
        eventtime = get(faker,'事件发生时间')
        values.append('\''+str(eventtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 事件描述 根据名称选择合适的函数来生成数据
        eventdescription = get(faker,'事件描述')
        values.append('\''+str(eventdescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 严重程度 根据名称选择合适的函数来生成数据
        severity = get(faker,'严重程度')
        values.append('\''+str(severity)+'\'')
        
        # 用于外键补充
        
        
        
        # 采取的措施 根据名称选择合适的函数来生成数据
        actiontaken = get(faker,'采取的措施')
        values.append('\''+str(actiontaken)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作人员ID 根据名称选择合适的函数来生成数据
        operatkwkworid = get(faker,'操作人员ID')
        values.append('\''+str(operatkwkworid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报警记录表
def generate_alarmreckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='alarmreckwkword'
    fields_en = ['`id`', '`alarmtime`', '`alarmtype`', '`alarmlevel`', '`description`', '`robotid`', '`resolved`', '`resolvedtime`', '`location`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 报警时间 根据名称选择合适的函数来生成数据
        alarmtime = get(faker,'报警时间')
        values.append('\''+str(alarmtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警类型 根据名称选择合适的函数来生成数据
        alarmtype = get(faker,'报警类型')
        values.append('\''+str(alarmtype)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警等级 根据名称选择合适的函数来生成数据
        alarmlevel = get(faker,'报警等级')
        values.append('\''+str(alarmlevel)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警描述 根据名称选择合适的函数来生成数据
        description = get(faker,'报警描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        if '机器人ID关联字段' not in cache:
            robotid = get(faker,'机器人ID关联字段')
        else:
            robotid = faker.random.choice(list(cache.get('机器人ID关联字段', )))
        
        # 用于外键补充
        
        if '机器人ID关联字段' not in cache:
            cache['机器人ID关联字段'] = set()
        cache['机器人ID关联字段'].add(robotid)
        values.append('\''+str(robotid)+'\'')
        
        
        
        # 是否已解决 根据名称选择合适的函数来生成数据
        resolved = get(faker,'是否已解决')
        values.append('\''+str(resolved)+'\'')
        
        # 用于外键补充
        
        
        
        # 解决时间 根据名称选择合适的函数来生成数据
        resolvedtime = get(faker,'解决时间')
        values.append('\''+str(resolvedtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警位置 根据名称选择合适的函数来生成数据
        location = get(faker,'报警位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人位置表
def generate_robotlocation(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotlocation'
    fields_en = ['`robotid`', '`locationcode`', '`areaname`', '`xcokwkwordkwkwinatex`', '`ycokwkwordkwkwinatey`', '`zcokwkwordkwkwinatez`', '`status`', '`lkwkwastupdatetime`', '`wkwkworkstationid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 机器人ID唯一标识每一个智能机器人的编号 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID唯一标识每一个智能机器人的编号')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 位置编码机器人当前所在位置的唯一编码 根据名称选择合适的函数来生成数据
        locationcode = get(faker,'位置编码机器人当前所在位置的唯一编码')
        values.append('\''+str(locationcode)+'\'')
        
        # 用于外键补充
        
        
        
        # 区域名称机器人所在区域的名称 根据名称选择合适的函数来生成数据
        areaname = get(faker,'区域名称机器人所在区域的名称')
        values.append('\''+str(areaname)+'\'')
        
        # 用于外键补充
        
        
        
        # 坐标机器人在该区域内的X轴坐标 根据名称选择合适的函数来生成数据
        xcokwkwordkwkwinatex = get(faker,'坐标机器人在该区域内的X轴坐标')
        values.append('\''+str(xcokwkwordkwkwinatex)+'\'')
        
        # 用于外键补充
        
        
        
        # 坐标机器人在该区域内的Y轴坐标 根据名称选择合适的函数来生成数据
        ycokwkwordkwkwinatey = get(faker,'坐标机器人在该区域内的Y轴坐标')
        values.append('\''+str(ycokwkwordkwkwinatey)+'\'')
        
        # 用于外键补充
        
        
        
        # 坐标机器人在该区域内的Z轴坐标如果适用 根据名称选择合适的函数来生成数据
        zcokwkwordkwkwinatez = get(faker,'坐标机器人在该区域内的Z轴坐标如果适用')
        values.append('\''+str(zcokwkwordkwkwinatez)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态机器人的当前状态如“运行中”、“空闲”、“故障”等 根据名称选择合适的函数来生成数据
        status = get(faker,'状态机器人的当前状态如“运行中”、“空闲”、“故障”等')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后更新时间机器人位置信息最后一次更新的时间 根据名称选择合适的函数来生成数据
        lkwkwastupdatetime = get(faker,'最后更新时间机器人位置信息最后一次更新的时间')
        values.append('\''+str(lkwkwastupdatetime)+'\'')
        
        # 用于外键补充
        
        
        
        if '工作站ID机器人当前所在的工作站的ID关联字段' not in cache:
            wkwkworkstationid = get(faker,'工作站ID机器人当前所在的工作站的ID关联字段')
        else:
            wkwkworkstationid = faker.random.choice(list(cache.get('工作站ID机器人当前所在的工作站的ID关联字段', )))
        
        # 用于外键补充
        
        if '工作站ID机器人当前所在的工作站的ID关联字段' not in cache:
            cache['工作站ID机器人当前所在的工作站的ID关联字段'] = set()
        cache['工作站ID机器人当前所在的工作站的ID关联字段'].add(wkwkworkstationid)
        values.append('\''+str(wkwkworkstationid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人状态表
def generate_robotstatus(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotstatus'
    fields_en = ['`robotid`', '`status`', '`timestamp`', '`location`', '`tkwkwaskid`', '`faultcode`', '`makwkwintenanceflag`', '`powerlevel`', '`lkwkwastmakwkwintenancedate`', '`associatedwkwkworkstationid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态 根据名称选择合适的函数来生成数据
        status = get(faker,'状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 时间戳 根据名称选择合适的函数来生成数据
        timestamp = get(faker,'时间戳')
        values.append('\''+str(timestamp)+'\'')
        
        # 用于外键补充
        
        
        
        # 位置 根据名称选择合适的函数来生成数据
        location = get(faker,'位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        # 任务ID 根据名称选择合适的函数来生成数据
        tkwkwaskid = get(faker,'任务ID')
        values.append('\''+str(tkwkwaskid)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障代码 根据名称选择合适的函数来生成数据
        faultcode = get(faker,'故障代码')
        values.append('\''+str(faultcode)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护标志 根据名称选择合适的函数来生成数据
        makwkwintenanceflag = get(faker,'维护标志')
        values.append('\''+str(makwkwintenanceflag)+'\'')
        
        # 用于外键补充
        
        
        
        # 电量水平 根据名称选择合适的函数来生成数据
        powerlevel = get(faker,'电量水平')
        values.append('\''+str(powerlevel)+'\'')
        
        # 用于外键补充
        
        
        
        # 上次维护日期 根据名称选择合适的函数来生成数据
        lkwkwastmakwkwintenancedate = get(faker,'上次维护日期')
        values.append('\''+str(lkwkwastmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联工作站ID' not in cache:
            associatedwkwkworkstationid = get(faker,'关联工作站ID')
        else:
            associatedwkwkworkstationid = faker.random.choice(list(cache.get('关联工作站ID', )))
        
        # 用于外键补充
        
        if '关联工作站ID' not in cache:
            cache['关联工作站ID'] = set()
        cache['关联工作站ID'].add(associatedwkwkworkstationid)
        values.append('\''+str(associatedwkwkworkstationid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人任务表
def generate_robottkwkwask(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robottkwkwask'
    fields_en = ['`tkwkwaskid`', '`robotid`', '`tkwkwaskname`', '`starttime`', '`endtime`', '`status`', '`prikwkwority`', '`details`', '`failurerekwkwason`', '`associatedprocessid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 任务ID 根据名称选择合适的函数来生成数据
        tkwkwaskid = get(faker,'任务ID')
        values.append('\''+str(tkwkwaskid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 任务名称 根据名称选择合适的函数来生成数据
        tkwkwaskname = get(faker,'任务名称')
        values.append('\''+str(tkwkwaskname)+'\'')
        
        # 用于外键补充
        
        
        
        # 开始时间 根据名称选择合适的函数来生成数据
        starttime = get(faker,'开始时间')
        values.append('\''+str(starttime)+'\'')
        
        # 用于外键补充
        
        
        
        # 结束时间 根据名称选择合适的函数来生成数据
        endtime = get(faker,'结束时间')
        values.append('\''+str(endtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 任务状态 根据名称选择合适的函数来生成数据
        status = get(faker,'任务状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 任务优先级 根据名称选择合适的函数来生成数据
        prikwkwority = get(faker,'任务优先级')
        values.append('\''+str(prikwkwority)+'\'')
        
        # 用于外键补充
        
        
        
        # 任务详情 根据名称选择合适的函数来生成数据
        details = get(faker,'任务详情')
        values.append('\''+str(details)+'\'')
        
        # 用于外键补充
        
        
        
        # 失败原因 根据名称选择合适的函数来生成数据
        failurerekwkwason = get(faker,'失败原因')
        values.append('\''+str(failurerekwkwason)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联流程ID' not in cache:
            associatedprocessid = get(faker,'关联流程ID')
        else:
            associatedprocessid = faker.random.choice(list(cache.get('关联流程ID', )))
        
        # 用于外键补充
        
        if '关联流程ID' not in cache:
            cache['关联流程ID'] = set()
        cache['关联流程ID'].add(associatedprocessid)
        values.append('\''+str(associatedprocessid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 生产线配置表
def generate_productionlkwkwineconfig(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='productionlkwkwineconfig'
    fields_en = ['`lkwkwineid`', '`lkwkwinename`', '`location`', '`capacity`', '`status`', '`creationtime`', '`lkwkwastupdatetime`', '`robotcount`', '`makwkwintenancecycle`', '`associatedfactkwkworyid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 生产线ID 根据名称选择合适的函数来生成数据
        lkwkwineid = get(faker,'生产线ID')
        values.append('\''+str(lkwkwineid)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线名称 根据名称选择合适的函数来生成数据
        lkwkwinename = get(faker,'生产线名称')
        values.append('\''+str(lkwkwinename)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线位置 根据名称选择合适的函数来生成数据
        location = get(faker,'生产线位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        # 产能 根据名称选择合适的函数来生成数据
        capacity = get(faker,'产能')
        values.append('\''+str(capacity)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线状态 根据名称选择合适的函数来生成数据
        status = get(faker,'生产线状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        creationtime = get(faker,'创建时间')
        values.append('\''+str(creationtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后更新时间 根据名称选择合适的函数来生成数据
        lkwkwastupdatetime = get(faker,'最后更新时间')
        values.append('\''+str(lkwkwastupdatetime)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人数量 根据名称选择合适的函数来生成数据
        robotcount = get(faker,'机器人数量')
        values.append('\''+str(robotcount)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护周期 根据名称选择合适的函数来生成数据
        makwkwintenancecycle = get(faker,'维护周期')
        values.append('\''+str(makwkwintenancecycle)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联工厂ID' not in cache:
            associatedfactkwkworyid = get(faker,'关联工厂ID')
        else:
            associatedfactkwkworyid = faker.random.choice(list(cache.get('关联工厂ID', )))
        
        # 用于外键补充
        
        if '关联工厂ID' not in cache:
            cache['关联工厂ID'] = set()
        cache['关联工厂ID'].add(associatedfactkwkworyid)
        values.append('\''+str(associatedfactkwkworyid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 权限管理表
def generate_permkwkwissionmanagement(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='permkwkwissionmanagement'
    fields_en = ['`id`', '`permkwkwissionname`', '`description`', '`createdtime`', '`updatedtime`', '`status`', '`roleid`', '`userid`', '`systemmodule`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 权限名称 根据名称选择合适的函数来生成数据
        permkwkwissionname = get(faker,'权限名称')
        values.append('\''+str(permkwkwissionname)+'\'')
        
        # 用于外键补充
        
        
        
        # 权限描述 根据名称选择合适的函数来生成数据
        description = get(faker,'权限描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdtime = get(faker,'创建时间')
        values.append('\''+str(createdtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedtime = get(faker,'更新时间')
        values.append('\''+str(updatedtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态如启用禁用 根据名称选择合适的函数来生成数据
        status = get(faker,'状态如启用禁用')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联角色ID' not in cache:
            roleid = get(faker,'关联角色ID')
        else:
            roleid = faker.random.choice(list(cache.get('关联角色ID', )))
        
        # 用于外键补充
        
        if '关联角色ID' not in cache:
            cache['关联角色ID'] = set()
        cache['关联角色ID'].add(roleid)
        values.append('\''+str(roleid)+'\'')
        
        
        
        if '关联用户ID可选用于特定用户权限' not in cache:
            userid = get(faker,'关联用户ID可选用于特定用户权限')
        else:
            userid = faker.random.choice(list(cache.get('关联用户ID可选用于特定用户权限', )))
        
        # 用于外键补充
        
        if '关联用户ID可选用于特定用户权限' not in cache:
            cache['关联用户ID可选用于特定用户权限'] = set()
        cache['关联用户ID可选用于特定用户权限'].add(userid)
        values.append('\''+str(userid)+'\'')
        
        
        
        # 系统模块如生产监控、设备控制等 根据名称选择合适的函数来生成数据
        systemmodule = get(faker,'系统模块如生产监控、设备控制等')
        values.append('\''+str(systemmodule)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 用户信息表
def generate_userinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='userinfo'
    fields_en = ['`userid`', '`username`', '`pkwkwasswkwkword`', '`email`', '`phonenumber`', '`roleid`', '`createtime`', '`lkwkwastlogkwkwintime`', '`isactive`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 用户ID 根据名称选择合适的函数来生成数据
        userid = get(faker,'用户ID')
        values.append('\''+str(userid)+'\'')
        
        # 用于外键补充
        
        
        
        # 用户名 根据名称选择合适的函数来生成数据
        username = get(faker,'用户名')
        values.append('\''+str(username)+'\'')
        
        # 用于外键补充
        
        
        
        # 密码 根据名称选择合适的函数来生成数据
        pkwkwasswkwkword = get(faker,'密码')
        values.append('\''+str(pkwkwasswkwkword)+'\'')
        
        # 用于外键补充
        
        
        
        # 电子邮箱 根据名称选择合适的函数来生成数据
        email = get(faker,'电子邮箱')
        values.append('\''+str(email)+'\'')
        
        # 用于外键补充
        
        
        
        # 电话号码 根据名称选择合适的函数来生成数据
        phonenumber = get(faker,'电话号码')
        values.append('\''+str(phonenumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色ID 根据名称选择合适的函数来生成数据
        roleid = get(faker,'角色ID')
        values.append('\''+str(roleid)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createtime = get(faker,'创建时间')
        values.append('\''+str(createtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后登录时间 根据名称选择合适的函数来生成数据
        lkwkwastlogkwkwintime = get(faker,'最后登录时间')
        values.append('\''+str(lkwkwastlogkwkwintime)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 角色信息表
def generate_roleinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='roleinfo'
    fields_en = ['`roleid`', '`rolename`', '`roledescription`', '`createtime`', '`updatetime`', '`isactive`', '`permkwkwissionids`', '`createdby`', '`updatedby`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 角色ID 根据名称选择合适的函数来生成数据
        roleid = get(faker,'角色ID')
        values.append('\''+str(roleid)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色名称 根据名称选择合适的函数来生成数据
        rolename = get(faker,'角色名称')
        values.append('\''+str(rolename)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色描述 根据名称选择合适的函数来生成数据
        roledescription = get(faker,'角色描述')
        values.append('\''+str(roledescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createtime = get(faker,'创建时间')
        values.append('\''+str(createtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatetime = get(faker,'更新时间')
        values.append('\''+str(updatetime)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        if '权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储' not in cache:
            permkwkwissionids = get(faker,'权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储')
        else:
            permkwkwissionids = faker.random.choice(list(cache.get('权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储', )))
        
        # 用于外键补充
        
        if '权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储' not in cache:
            cache['权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储'] = set()
        cache['权限ID列关联字段存储该角色拥有的权限ID集合以逗号分隔或采用其他方式存储'].add(permkwkwissionids)
        values.append('\''+str(permkwkwissionids)+'\'')
        
        
        
        if '创建者ID关联字段指向创建该角色的用户ID' not in cache:
            createdby = get(faker,'创建者ID关联字段指向创建该角色的用户ID')
        else:
            createdby = faker.random.choice(list(cache.get('创建者ID关联字段指向创建该角色的用户ID', )))
        
        # 用于外键补充
        
        if '创建者ID关联字段指向创建该角色的用户ID' not in cache:
            cache['创建者ID关联字段指向创建该角色的用户ID'] = set()
        cache['创建者ID关联字段指向创建该角色的用户ID'].add(createdby)
        values.append('\''+str(createdby)+'\'')
        
        
        
        if '更新者ID关联字段指向最后更新该角色的用户ID' not in cache:
            updatedby = get(faker,'更新者ID关联字段指向最后更新该角色的用户ID')
        else:
            updatedby = faker.random.choice(list(cache.get('更新者ID关联字段指向最后更新该角色的用户ID', )))
        
        # 用于外键补充
        
        if '更新者ID关联字段指向最后更新该角色的用户ID' not in cache:
            cache['更新者ID关联字段指向最后更新该角色的用户ID'] = set()
        cache['更新者ID关联字段指向最后更新该角色的用户ID'].add(updatedby)
        values.append('\''+str(updatedby)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 用户角色关联表
def generate_userrolerelation(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='userrolerelation'
    fields_en = ['`userid`', '`rolename`', '`relationid`', '`createtime`', '`updatetime`', '`isactive`', '`createdby`', '`updatedby`', '`roleid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 用户ID 根据名称选择合适的函数来生成数据
        userid = get(faker,'用户ID')
        values.append('\''+str(userid)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色名 根据名称选择合适的函数来生成数据
        rolename = get(faker,'角色名')
        values.append('\''+str(rolename)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联ID' not in cache:
            relationid = get(faker,'关联ID')
        else:
            relationid = faker.random.choice(list(cache.get('关联ID', )))
        
        # 用于外键补充
        
        if '关联ID' not in cache:
            cache['关联ID'] = set()
        cache['关联ID'].add(relationid)
        values.append('\''+str(relationid)+'\'')
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createtime = get(faker,'创建时间')
        values.append('\''+str(createtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatetime = get(faker,'更新时间')
        values.append('\''+str(updatetime)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活用于控制用户角色关系的有效性 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活用于控制用户角色关系的有效性')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者ID 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者ID')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新者ID 根据名称选择合适的函数来生成数据
        updatedby = get(faker,'更新者ID')
        values.append('\''+str(updatedby)+'\'')
        
        # 用于外键补充
        
        
        
        if '角色ID关联到角色的ID' not in cache:
            roleid = get(faker,'角色ID关联到角色的ID')
        else:
            roleid = faker.random.choice(list(cache.get('角色ID关联到角色的ID', )))
        
        # 用于外键补充
        
        if '角色ID关联到角色的ID' not in cache:
            cache['角色ID关联到角色的ID'] = set()
        cache['角色ID关联到角色的ID'].add(roleid)
        values.append('\''+str(roleid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人故障表
def generate_robotfault(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotfault'
    fields_en = ['`faultid`', '`robotid`', '`faulttype`', '`faultdescription`', '`faulttime`', '`repairstatus`', '`repairtime`', '`repairperson`', '`faultseverity`', '`relatedcomponent`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 故障ID 根据名称选择合适的函数来生成数据
        faultid = get(faker,'故障ID')
        values.append('\''+str(faultid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障类型 根据名称选择合适的函数来生成数据
        faulttype = get(faker,'故障类型')
        values.append('\''+str(faulttype)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障描述 根据名称选择合适的函数来生成数据
        faultdescription = get(faker,'故障描述')
        values.append('\''+str(faultdescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障时间 根据名称选择合适的函数来生成数据
        faulttime = get(faker,'故障时间')
        values.append('\''+str(faulttime)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修状态 根据名称选择合适的函数来生成数据
        repairstatus = get(faker,'维修状态')
        values.append('\''+str(repairstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修时间 根据名称选择合适的函数来生成数据
        repairtime = get(faker,'维修时间')
        values.append('\''+str(repairtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修人员 根据名称选择合适的函数来生成数据
        repairperson = get(faker,'维修人员')
        values.append('\''+str(repairperson)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障严重程度 根据名称选择合适的函数来生成数据
        faultseverity = get(faker,'故障严重程度')
        values.append('\''+str(faultseverity)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联组件' not in cache:
            relatedcomponent = get(faker,'关联组件')
        else:
            relatedcomponent = faker.random.choice(list(cache.get('关联组件', )))
        
        # 用于外键补充
        
        if '关联组件' not in cache:
            cache['关联组件'] = set()
        cache['关联组件'].add(relatedcomponent)
        values.append('\''+str(relatedcomponent)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 维修记录表
def generate_makwkwintenancereckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='makwkwintenancereckwkword'
    fields_en = ['`reckwkwordid`', '`robotid`', '`makwkwintenancedate`', '`makwkwintenancetype`', '`problemdescription`', '`repairstatus`', '`technicianid`', '`repaircost`', '`repairduration`', '`relatedparts`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 记录ID 根据名称选择合适的函数来生成数据
        reckwkwordid = get(faker,'记录ID')
        values.append('\''+str(reckwkwordid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修日期 根据名称选择合适的函数来生成数据
        makwkwintenancedate = get(faker,'维修日期')
        values.append('\''+str(makwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修类型 根据名称选择合适的函数来生成数据
        makwkwintenancetype = get(faker,'维修类型')
        values.append('\''+str(makwkwintenancetype)+'\'')
        
        # 用于外键补充
        
        
        
        # 问题描述 根据名称选择合适的函数来生成数据
        problemdescription = get(faker,'问题描述')
        values.append('\''+str(problemdescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修状态 根据名称选择合适的函数来生成数据
        repairstatus = get(faker,'维修状态')
        values.append('\''+str(repairstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 技术员ID 根据名称选择合适的函数来生成数据
        technicianid = get(faker,'技术员ID')
        values.append('\''+str(technicianid)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修费用 根据名称选择合适的函数来生成数据
        repaircost = get(faker,'维修费用')
        values.append('\''+str(repaircost)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修时长 根据名称选择合适的函数来生成数据
        repairduration = get(faker,'维修时长')
        values.append('\''+str(repairduration)+'\'')
        
        # 用于外键补充
        
        
        
        # 相关部件 根据名称选择合适的函数来生成数据
        relatedparts = get(faker,'相关部件')
        values.append('\''+str(relatedparts)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人型号表
def generate_robotmokwkwdel(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotmokwkwdel'
    fields_en = ['`robotmokwkwdelid`', '`mokwkwdelname`', '`manufacturer`', '`productionyear`', '`maxpayload`', '`operatkwkwingvoltage`', '`connectivitytype`', '`safetycertkwkwification`', '`makwkwintenanceinterval`', '`relatedcomponentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 机器人型号ID 根据名称选择合适的函数来生成数据
        robotmokwkwdelid = get(faker,'机器人型号ID')
        values.append('\''+str(robotmokwkwdelid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人型号名称 根据名称选择合适的函数来生成数据
        mokwkwdelname = get(faker,'机器人型号名称')
        values.append('\''+str(mokwkwdelname)+'\'')
        
        # 用于外键补充
        
        
        
        # 制造商 根据名称选择合适的函数来生成数据
        manufacturer = get(faker,'制造商')
        values.append('\''+str(manufacturer)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产年份 根据名称选择合适的函数来生成数据
        productionyear = get(faker,'生产年份')
        values.append('\''+str(productionyear)+'\'')
        
        # 用于外键补充
        
        
        
        # 最大负载能力 根据名称选择合适的函数来生成数据
        maxpayload = get(faker,'最大负载能力')
        values.append('\''+str(maxpayload)+'\'')
        
        # 用于外键补充
        
        
        
        # 工作电压 根据名称选择合适的函数来生成数据
        operatkwkwingvoltage = get(faker,'工作电压')
        values.append('\''+str(operatkwkwingvoltage)+'\'')
        
        # 用于外键补充
        
        
        
        # 连接类型 根据名称选择合适的函数来生成数据
        connectivitytype = get(faker,'连接类型')
        values.append('\''+str(connectivitytype)+'\'')
        
        # 用于外键补充
        
        
        
        # 安全认证 根据名称选择合适的函数来生成数据
        safetycertkwkwification = get(faker,'安全认证')
        values.append('\''+str(safetycertkwkwification)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护周期 根据名称选择合适的函数来生成数据
        makwkwintenanceinterval = get(faker,'维护周期')
        values.append('\''+str(makwkwintenanceinterval)+'\'')
        
        # 用于外键补充
        
        
        
        if '相关组件ID关联字段指向其他如组件' not in cache:
            relatedcomponentid = get(faker,'相关组件ID关联字段指向其他如组件')
        else:
            relatedcomponentid = faker.random.choice(list(cache.get('相关组件ID关联字段指向其他如组件', )))
        
        # 用于外键补充
        
        if '相关组件ID关联字段指向其他如组件' not in cache:
            cache['相关组件ID关联字段指向其他如组件'] = set()
        cache['相关组件ID关联字段指向其他如组件'].add(relatedcomponentid)
        values.append('\''+str(relatedcomponentid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 传感器信息表
def generate_senskwkworinfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='senskwkworinfo'
    fields_en = ['`senskwkworid`', '`senskwkworname`', '`senskwkwortype`', '`location`', '`status`', '`lkwkwastupdatetime`', '`mekwkwasurementvalue`', '`unit`', '`alarmthreshold`', '`associatedrobotid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 传感器ID 根据名称选择合适的函数来生成数据
        senskwkworid = get(faker,'传感器ID')
        values.append('\''+str(senskwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 传感器名称 根据名称选择合适的函数来生成数据
        senskwkworname = get(faker,'传感器名称')
        values.append('\''+str(senskwkworname)+'\'')
        
        # 用于外键补充
        
        
        
        # 传感器类型 根据名称选择合适的函数来生成数据
        senskwkwortype = get(faker,'传感器类型')
        values.append('\''+str(senskwkwortype)+'\'')
        
        # 用于外键补充
        
        
        
        # 位置 根据名称选择合适的函数来生成数据
        location = get(faker,'位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态 根据名称选择合适的函数来生成数据
        status = get(faker,'状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后更新时间 根据名称选择合适的函数来生成数据
        lkwkwastupdatetime = get(faker,'最后更新时间')
        values.append('\''+str(lkwkwastupdatetime)+'\'')
        
        # 用于外键补充
        
        
        
        # 测量值 根据名称选择合适的函数来生成数据
        mekwkwasurementvalue = get(faker,'测量值')
        values.append('\''+str(mekwkwasurementvalue)+'\'')
        
        # 用于外键补充
        
        
        
        # 单位 根据名称选择合适的函数来生成数据
        unit = get(faker,'单位')
        values.append('\''+str(unit)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警阈值 根据名称选择合适的函数来生成数据
        alarmthreshold = get(faker,'报警阈值')
        values.append('\''+str(alarmthreshold)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联机器人ID' not in cache:
            associatedrobotid = get(faker,'关联机器人ID')
        else:
            associatedrobotid = faker.random.choice(list(cache.get('关联机器人ID', )))
        
        # 用于外键补充
        
        if '关联机器人ID' not in cache:
            cache['关联机器人ID'] = set()
        cache['关联机器人ID'].add(associatedrobotid)
        values.append('\''+str(associatedrobotid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 传感器数据表
def generate_senskwkwordata(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='senskwkwordata'
    fields_en = ['`senskwkworid`', '`timestamp`', '`temperature`', '`humidity`', '`pressure`', '`vibration`', '`status`', '`location`', '`deviceid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 传感器ID 根据名称选择合适的函数来生成数据
        senskwkworid = get(faker,'传感器ID')
        values.append('\''+str(senskwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 时间戳 根据名称选择合适的函数来生成数据
        timestamp = get(faker,'时间戳')
        values.append('\''+str(timestamp)+'\'')
        
        # 用于外键补充
        
        
        
        # 温度 根据名称选择合适的函数来生成数据
        temperature = get(faker,'温度')
        values.append('\''+str(temperature)+'\'')
        
        # 用于外键补充
        
        
        
        # 湿度 根据名称选择合适的函数来生成数据
        humidity = get(faker,'湿度')
        values.append('\''+str(humidity)+'\'')
        
        # 用于外键补充
        
        
        
        # 压力 根据名称选择合适的函数来生成数据
        pressure = get(faker,'压力')
        values.append('\''+str(pressure)+'\'')
        
        # 用于外键补充
        
        
        
        # 振动强度 根据名称选择合适的函数来生成数据
        vibration = get(faker,'振动强度')
        values.append('\''+str(vibration)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态如正常、异常 根据名称选择合适的函数来生成数据
        status = get(faker,'状态如正常、异常')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 位置 根据名称选择合适的函数来生成数据
        location = get(faker,'位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        if '设备ID关联字段指向产生数据的设备' not in cache:
            deviceid = get(faker,'设备ID关联字段指向产生数据的设备')
        else:
            deviceid = faker.random.choice(list(cache.get('设备ID关联字段指向产生数据的设备', )))
        
        # 用于外键补充
        
        if '设备ID关联字段指向产生数据的设备' not in cache:
            cache['设备ID关联字段指向产生数据的设备'] = set()
        cache['设备ID关联字段指向产生数据的设备'].add(deviceid)
        values.append('\''+str(deviceid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 监控摄像头信息表
def generate_camerainfo(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='camerainfo'
    fields_en = ['`cameraid`', '`cameraname`', '`location`', '`ipaddressip`', '`pkwkwortnumber`', '`resolution`', '`status`', '`lkwkwastchecktime`', '`connectedrobotid`', '`createdat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 摄像头ID 根据名称选择合适的函数来生成数据
        cameraid = get(faker,'摄像头ID')
        values.append('\''+str(cameraid)+'\'')
        
        # 用于外键补充
        
        
        
        # 摄像头名称 根据名称选择合适的函数来生成数据
        cameraname = get(faker,'摄像头名称')
        values.append('\''+str(cameraname)+'\'')
        
        # 用于外键补充
        
        
        
        # 安装位置 根据名称选择合适的函数来生成数据
        location = get(faker,'安装位置')
        values.append('\''+str(location)+'\'')
        
        # 用于外键补充
        
        
        
        # 地址 根据名称选择合适的函数来生成数据
        ipaddressip = get(faker,'地址')
        values.append('\''+str(ipaddressip)+'\'')
        
        # 用于外键补充
        
        
        
        # 端口号 根据名称选择合适的函数来生成数据
        pkwkwortnumber = get(faker,'端口号')
        values.append('\''+str(pkwkwortnumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 分辨率 根据名称选择合适的函数来生成数据
        resolution = get(faker,'分辨率')
        values.append('\''+str(resolution)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态如在线、离线 根据名称选择合适的函数来生成数据
        status = get(faker,'状态如在线、离线')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后检查时间 根据名称选择合适的函数来生成数据
        lkwkwastchecktime = get(faker,'最后检查时间')
        values.append('\''+str(lkwkwastchecktime)+'\'')
        
        # 用于外键补充
        
        
        
        if '连接机器人ID关联字段指向机器人信息' not in cache:
            connectedrobotid = get(faker,'连接机器人ID关联字段指向机器人信息')
        else:
            connectedrobotid = faker.random.choice(list(cache.get('连接机器人ID关联字段指向机器人信息', )))
        
        # 用于外键补充
        
        if '连接机器人ID关联字段指向机器人信息' not in cache:
            cache['连接机器人ID关联字段指向机器人信息'] = set()
        cache['连接机器人ID关联字段指向机器人信息'].add(connectedrobotid)
        values.append('\''+str(connectedrobotid)+'\'')
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 视频录像表
def generate_videoreckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='videoreckwkword'
    fields_en = ['`id`', '`videofilepath`', '`reckwkwordkwkwingstarttime`', '`reckwkwordkwkwingendtime`', '`cameraid`', '`robotid`', '`status`', '`resolution`', '`duration`', '`createdat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 视频文件路径 根据名称选择合适的函数来生成数据
        videofilepath = get(faker,'视频文件路径')
        values.append('\''+str(videofilepath)+'\'')
        
        # 用于外键补充
        
        
        
        # 录像开始时间 根据名称选择合适的函数来生成数据
        reckwkwordkwkwingstarttime = get(faker,'录像开始时间')
        values.append('\''+str(reckwkwordkwkwingstarttime)+'\'')
        
        # 用于外键补充
        
        
        
        # 录像结束时间 根据名称选择合适的函数来生成数据
        reckwkwordkwkwingendtime = get(faker,'录像结束时间')
        values.append('\''+str(reckwkwordkwkwingendtime)+'\'')
        
        # 用于外键补充
        
        
        
        if '摄像头ID关联摄像头信息' not in cache:
            cameraid = get(faker,'摄像头ID关联摄像头信息')
        else:
            cameraid = faker.random.choice(list(cache.get('摄像头ID关联摄像头信息', )))
        
        # 用于外键补充
        
        if '摄像头ID关联摄像头信息' not in cache:
            cache['摄像头ID关联摄像头信息'] = set()
        cache['摄像头ID关联摄像头信息'].add(cameraid)
        values.append('\''+str(cameraid)+'\'')
        
        
        
        if '机器人ID关联机器人信息' not in cache:
            robotid = get(faker,'机器人ID关联机器人信息')
        else:
            robotid = faker.random.choice(list(cache.get('机器人ID关联机器人信息', )))
        
        # 用于外键补充
        
        if '机器人ID关联机器人信息' not in cache:
            cache['机器人ID关联机器人信息'] = set()
        cache['机器人ID关联机器人信息'].add(robotid)
        values.append('\''+str(robotid)+'\'')
        
        
        
        # 录像状态如正常、异常、删除 根据名称选择合适的函数来生成数据
        status = get(faker,'录像状态如正常、异常、删除')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 录像分辨率 根据名称选择合适的函数来生成数据
        resolution = get(faker,'录像分辨率')
        values.append('\''+str(resolution)+'\'')
        
        # 用于外键补充
        
        
        
        # 录像时长秒 根据名称选择合适的函数来生成数据
        duration = get(faker,'录像时长秒')
        values.append('\''+str(duration)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人操作日志表
def generate_robotoperationlog(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotoperationlog'
    fields_en = ['`id`', '`robotid`', '`operationtime`', '`operationtype`', '`operationresult`', '`operatkwkworid`', '`errkwkworcode`', '`errkwkwormessage`', '`machkwkwinelkwkwineid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作时间 根据名称选择合适的函数来生成数据
        operationtime = get(faker,'操作时间')
        values.append('\''+str(operationtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作类型 根据名称选择合适的函数来生成数据
        operationtype = get(faker,'操作类型')
        values.append('\''+str(operationtype)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作结果 根据名称选择合适的函数来生成数据
        operationresult = get(faker,'操作结果')
        values.append('\''+str(operationresult)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作员ID 根据名称选择合适的函数来生成数据
        operatkwkworid = get(faker,'操作员ID')
        values.append('\''+str(operatkwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 错误代码 根据名称选择合适的函数来生成数据
        errkwkworcode = get(faker,'错误代码')
        values.append('\''+str(errkwkworcode)+'\'')
        
        # 用于外键补充
        
        
        
        # 错误信息 根据名称选择合适的函数来生成数据
        errkwkwormessage = get(faker,'错误信息')
        values.append('\''+str(errkwkwormessage)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线ID 根据名称选择合适的函数来生成数据
        machkwkwinelkwkwineid = get(faker,'生产线ID')
        values.append('\''+str(machkwkwinelkwkwineid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 生产线效率统计表
def generate_productionlkwkwineefficiency(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='productionlkwkwineefficiency'
    fields_en = ['`lkwkwineid`', '`efficiencyrate`', '`dailyoutput`', '`downtimehours`', '`makwkwintenancefrequency`', '`lkwkwastmakwkwintenancedate`', '`robotcount`', '`operatkwkworcount`', '`productdefectrate`', '`kwkwassociatedwkwkworkshopid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 生产线ID 根据名称选择合适的函数来生成数据
        lkwkwineid = get(faker,'生产线ID')
        values.append('\''+str(lkwkwineid)+'\'')
        
        # 用于外键补充
        
        
        
        # 效率率 根据名称选择合适的函数来生成数据
        efficiencyrate = get(faker,'效率率')
        values.append('\''+str(efficiencyrate)+'\'')
        
        # 用于外键补充
        
        
        
        # 日产量 根据名称选择合适的函数来生成数据
        dailyoutput = get(faker,'日产量')
        values.append('\''+str(dailyoutput)+'\'')
        
        # 用于外键补充
        
        
        
        # 停机时间小时 根据名称选择合适的函数来生成数据
        downtimehours = get(faker,'停机时间小时')
        values.append('\''+str(downtimehours)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护频率 根据名称选择合适的函数来生成数据
        makwkwintenancefrequency = get(faker,'维护频率')
        values.append('\''+str(makwkwintenancefrequency)+'\'')
        
        # 用于外键补充
        
        
        
        # 上次维护日期 根据名称选择合适的函数来生成数据
        lkwkwastmakwkwintenancedate = get(faker,'上次维护日期')
        values.append('\''+str(lkwkwastmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人数量 根据名称选择合适的函数来生成数据
        robotcount = get(faker,'机器人数量')
        values.append('\''+str(robotcount)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作人员数量 根据名称选择合适的函数来生成数据
        operatkwkworcount = get(faker,'操作人员数量')
        values.append('\''+str(operatkwkworcount)+'\'')
        
        # 用于外键补充
        
        
        
        # 产品缺陷率 根据名称选择合适的函数来生成数据
        productdefectrate = get(faker,'产品缺陷率')
        values.append('\''+str(productdefectrate)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联车间ID' not in cache:
            kwkwassociatedwkwkworkshopid = get(faker,'关联车间ID')
        else:
            kwkwassociatedwkwkworkshopid = faker.random.choice(list(cache.get('关联车间ID', )))
        
        # 用于外键补充
        
        if '关联车间ID' not in cache:
            cache['关联车间ID'] = set()
        cache['关联车间ID'].add(kwkwassociatedwkwkworkshopid)
        values.append('\''+str(kwkwassociatedwkwkworkshopid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人固件更新表
def generate_robotfirmwareupdate(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotfirmwareupdate'
    fields_en = ['`id`', '`robotid`', '`firmwareversion`', '`updatedate`', '`updatestatus`', '`updatedescription`', '`previousfirmwareversion`', '`updatedby`', '`issuccessful`', '`failurerekwkwason`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 固件版本号 根据名称选择合适的函数来生成数据
        firmwareversion = get(faker,'固件版本号')
        values.append('\''+str(firmwareversion)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新日期 根据名称选择合适的函数来生成数据
        updatedate = get(faker,'更新日期')
        values.append('\''+str(updatedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新状态 根据名称选择合适的函数来生成数据
        updatestatus = get(faker,'更新状态')
        values.append('\''+str(updatestatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新描述 根据名称选择合适的函数来生成数据
        updatedescription = get(faker,'更新描述')
        values.append('\''+str(updatedescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 前固件版本号 根据名称选择合适的函数来生成数据
        previousfirmwareversion = get(faker,'前固件版本号')
        values.append('\''+str(previousfirmwareversion)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新者 根据名称选择合适的函数来生成数据
        updatedby = get(faker,'更新者')
        values.append('\''+str(updatedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否成功 根据名称选择合适的函数来生成数据
        issuccessful = get(faker,'是否成功')
        values.append('\''+str(issuccessful)+'\'')
        
        # 用于外键补充
        
        
        
        # 失败原因 根据名称选择合适的函数来生成数据
        failurerekwkwason = get(faker,'失败原因')
        values.append('\''+str(failurerekwkwason)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人固件版本表
def generate_robotfirmwareversion(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotfirmwareversion'
    fields_en = ['`firmwareid`', '`firmwareversion`', '`relekwkwasedate`', '`manufacturer`', '`compatibility`', '`filesize`', '`downloadurl`', '`description`', '`robotmokwkwdelid`', '`islatest`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 固件ID 根据名称选择合适的函数来生成数据
        firmwareid = get(faker,'固件ID')
        values.append('\''+str(firmwareid)+'\'')
        
        # 用于外键补充
        
        
        
        # 固件版本号 根据名称选择合适的函数来生成数据
        firmwareversion = get(faker,'固件版本号')
        values.append('\''+str(firmwareversion)+'\'')
        
        # 用于外键补充
        
        
        
        # 发布日期 根据名称选择合适的函数来生成数据
        relekwkwasedate = get(faker,'发布日期')
        values.append('\''+str(relekwkwasedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 制造商 根据名称选择合适的函数来生成数据
        manufacturer = get(faker,'制造商')
        values.append('\''+str(manufacturer)+'\'')
        
        # 用于外键补充
        
        
        
        # 兼容性说明 根据名称选择合适的函数来生成数据
        compatibility = get(faker,'兼容性说明')
        values.append('\''+str(compatibility)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件大小 根据名称选择合适的函数来生成数据
        filesize = get(faker,'文件大小')
        values.append('\''+str(filesize)+'\'')
        
        # 用于外键补充
        
        
        
        # 下载链接 根据名称选择合适的函数来生成数据
        downloadurl = get(faker,'下载链接')
        values.append('\''+str(downloadurl)+'\'')
        
        # 用于外键补充
        
        
        
        # 固件描述 根据名称选择合适的函数来生成数据
        description = get(faker,'固件描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        if '机器人模型ID关联字段' not in cache:
            robotmokwkwdelid = get(faker,'机器人模型ID关联字段')
        else:
            robotmokwkwdelid = faker.random.choice(list(cache.get('机器人模型ID关联字段', )))
        
        # 用于外键补充
        
        if '机器人模型ID关联字段' not in cache:
            cache['机器人模型ID关联字段'] = set()
        cache['机器人模型ID关联字段'].add(robotmokwkwdelid)
        values.append('\''+str(robotmokwkwdelid)+'\'')
        
        
        
        # 是否为最新版本 根据名称选择合适的函数来生成数据
        islatest = get(faker,'是否为最新版本')
        values.append('\''+str(islatest)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 生产线安全规则表
def generate_productionlkwkwinesafetyrule(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='productionlkwkwinesafetyrule'
    fields_en = ['`ruleid`', '`rulename`', '`productionlkwkwineid`', '`ruledescription`', '`severitylevel`', '`detectionmethod`', '`alertthreshold`', '`alertrecipients`', '`createdat`', '`modkwkwifiedat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 规则ID 根据名称选择合适的函数来生成数据
        ruleid = get(faker,'规则ID')
        values.append('\''+str(ruleid)+'\'')
        
        # 用于外键补充
        
        
        
        # 规则名称 根据名称选择合适的函数来生成数据
        rulename = get(faker,'规则名称')
        values.append('\''+str(rulename)+'\'')
        
        # 用于外键补充
        
        
        
        # 生产线ID 根据名称选择合适的函数来生成数据
        productionlkwkwineid = get(faker,'生产线ID')
        values.append('\''+str(productionlkwkwineid)+'\'')
        
        # 用于外键补充
        
        
        
        # 规则描述 根据名称选择合适的函数来生成数据
        ruledescription = get(faker,'规则描述')
        values.append('\''+str(ruledescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 严重等级 根据名称选择合适的函数来生成数据
        severitylevel = get(faker,'严重等级')
        values.append('\''+str(severitylevel)+'\'')
        
        # 用于外键补充
        
        
        
        # 检测方式 根据名称选择合适的函数来生成数据
        detectionmethod = get(faker,'检测方式')
        values.append('\''+str(detectionmethod)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警阈值 根据名称选择合适的函数来生成数据
        alertthreshold = get(faker,'报警阈值')
        values.append('\''+str(alertthreshold)+'\'')
        
        # 用于外键补充
        
        
        
        # 报警接收人 根据名称选择合适的函数来生成数据
        alertrecipients = get(faker,'报警接收人')
        values.append('\''+str(alertrecipients)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改时间 根据名称选择合适的函数来生成数据
        modkwkwifiedat = get(faker,'修改时间')
        values.append('\''+str(modkwkwifiedat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人安全配置表
def generate_robotsafetyconfig(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotsafetyconfig'
    fields_en = ['`robotid`', '`safetylevel`', '`alertthreshold`', '`emergencystopcode`', '`makwkwintenanceinterval`', '`lkwkwastmakwkwintenancedate`', '`operatkwkwingstatus`', '`faulthkwkwistkwkwory`', '`associatedwkwkworkstationid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 安全等级 根据名称选择合适的函数来生成数据
        safetylevel = get(faker,'安全等级')
        values.append('\''+str(safetylevel)+'\'')
        
        # 用于外键补充
        
        
        
        # 警报阈值 根据名称选择合适的函数来生成数据
        alertthreshold = get(faker,'警报阈值')
        values.append('\''+str(alertthreshold)+'\'')
        
        # 用于外键补充
        
        
        
        # 紧急停止码 根据名称选择合适的函数来生成数据
        emergencystopcode = get(faker,'紧急停止码')
        values.append('\''+str(emergencystopcode)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护间隔 根据名称选择合适的函数来生成数据
        makwkwintenanceinterval = get(faker,'维护间隔')
        values.append('\''+str(makwkwintenanceinterval)+'\'')
        
        # 用于外键补充
        
        
        
        # 上次维护日期 根据名称选择合适的函数来生成数据
        lkwkwastmakwkwintenancedate = get(faker,'上次维护日期')
        values.append('\''+str(lkwkwastmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 运行状态 根据名称选择合适的函数来生成数据
        operatkwkwingstatus = get(faker,'运行状态')
        values.append('\''+str(operatkwkwingstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障历史 根据名称选择合适的函数来生成数据
        faulthkwkwistkwkwory = get(faker,'故障历史')
        values.append('\''+str(faulthkwkwistkwkwory)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联工作站ID' not in cache:
            associatedwkwkworkstationid = get(faker,'关联工作站ID')
        else:
            associatedwkwkworkstationid = faker.random.choice(list(cache.get('关联工作站ID', )))
        
        # 用于外键补充
        
        if '关联工作站ID' not in cache:
            cache['关联工作站ID'] = set()
        cache['关联工作站ID'].add(associatedwkwkworkstationid)
        values.append('\''+str(associatedwkwkworkstationid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人巡检计划表
def generate_robotinspectionplan(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotinspectionplan'
    fields_en = ['`planid`', '`robotid`', '`starttime`', '`endtime`', '`frequency`', '`inspectionarea`', '`status`', '`createdby`', '`lkwkwastmodkwkwifiedby`', '`lkwkwastmodkwkwifiedtime`', '`associatedtkwkwaskid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 计划ID 根据名称选择合适的函数来生成数据
        planid = get(faker,'计划ID')
        values.append('\''+str(planid)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 开始时间 根据名称选择合适的函数来生成数据
        starttime = get(faker,'开始时间')
        values.append('\''+str(starttime)+'\'')
        
        # 用于外键补充
        
        
        
        # 结束时间 根据名称选择合适的函数来生成数据
        endtime = get(faker,'结束时间')
        values.append('\''+str(endtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 巡检频率 根据名称选择合适的函数来生成数据
        frequency = get(faker,'巡检频率')
        values.append('\''+str(frequency)+'\'')
        
        # 用于外键补充
        
        
        
        # 巡检区域 根据名称选择合适的函数来生成数据
        inspectionarea = get(faker,'巡检区域')
        values.append('\''+str(inspectionarea)+'\'')
        
        # 用于外键补充
        
        
        
        # 计划状态 根据名称选择合适的函数来生成数据
        status = get(faker,'计划状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改者 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifiedby = get(faker,'最后修改者')
        values.append('\''+str(lkwkwastmodkwkwifiedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改时间 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifiedtime = get(faker,'最后修改时间')
        values.append('\''+str(lkwkwastmodkwkwifiedtime)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联任务ID' not in cache:
            associatedtkwkwaskid = get(faker,'关联任务ID')
        else:
            associatedtkwkwaskid = faker.random.choice(list(cache.get('关联任务ID', )))
        
        # 用于外键补充
        
        if '关联任务ID' not in cache:
            cache['关联任务ID'] = set()
        cache['关联任务ID'].add(associatedtkwkwaskid)
        values.append('\''+str(associatedtkwkwaskid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 巡检结果表
def generate_inspectionresult(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='inspectionresult'
    fields_en = ['`inspectionid`', '`inspectiontime`', '`robotid`', '`safetystatus`', '`faultdescription`', '`repairstatus`', '`inspectkwkwor`', '`repairer`', '`repairtime`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 巡检编号 根据名称选择合适的函数来生成数据
        inspectionid = get(faker,'巡检编号')
        values.append('\''+str(inspectionid)+'\'')
        
        # 用于外键补充
        
        
        
        # 巡检时间 根据名称选择合适的函数来生成数据
        inspectiontime = get(faker,'巡检时间')
        values.append('\''+str(inspectiontime)+'\'')
        
        # 用于外键补充
        
        
        
        # 机器人编号 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人编号')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 安全状态 根据名称选择合适的函数来生成数据
        safetystatus = get(faker,'安全状态')
        values.append('\''+str(safetystatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 故障描述 根据名称选择合适的函数来生成数据
        faultdescription = get(faker,'故障描述')
        values.append('\''+str(faultdescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修状态 根据名称选择合适的函数来生成数据
        repairstatus = get(faker,'维修状态')
        values.append('\''+str(repairstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 巡检员 根据名称选择合适的函数来生成数据
        inspectkwkwor = get(faker,'巡检员')
        values.append('\''+str(inspectkwkwor)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修人员 根据名称选择合适的函数来生成数据
        repairer = get(faker,'维修人员')
        values.append('\''+str(repairer)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修时间 根据名称选择合适的函数来生成数据
        repairtime = get(faker,'维修时间')
        values.append('\''+str(repairtime)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人维护周期表
def generate_robotmakwkwintenancecycle(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotmakwkwintenancecycle'
    fields_en = ['`id`', '`robotid`', '`makwkwintenancecycle`', '`lkwkwastmakwkwintenancedate`', '`nextmakwkwintenancedate`', '`makwkwintenancestatus`', '`makwkwintenancetype`', '`makwkwintenancenotes`', '`createdby`', '`createdat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护周期天数 根据名称选择合适的函数来生成数据
        makwkwintenancecycle = get(faker,'维护周期天数')
        values.append('\''+str(makwkwintenancecycle)+'\'')
        
        # 用于外键补充
        
        
        
        # 上次维护日期 根据名称选择合适的函数来生成数据
        lkwkwastmakwkwintenancedate = get(faker,'上次维护日期')
        values.append('\''+str(lkwkwastmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 下次维护日期 根据名称选择合适的函数来生成数据
        nextmakwkwintenancedate = get(faker,'下次维护日期')
        values.append('\''+str(nextmakwkwintenancedate)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护状态如待维护、维护中、已完成 根据名称选择合适的函数来生成数据
        makwkwintenancestatus = get(faker,'维护状态如待维护、维护中、已完成')
        values.append('\''+str(makwkwintenancestatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护类型如常规检查、深度保养、故障修复 根据名称选择合适的函数来生成数据
        makwkwintenancetype = get(faker,'维护类型如常规检查、深度保养、故障修复')
        values.append('\''+str(makwkwintenancetype)+'\'')
        
        # 用于外键补充
        
        
        
        # 维护备注 根据名称选择合适的函数来生成数据
        makwkwintenancenotes = get(faker,'维护备注')
        values.append('\''+str(makwkwintenancenotes)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建人 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建人')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 生产线停机记录表
def generate_productionlkwkwinedowntimereckwkword(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='productionlkwkwinedowntimereckwkword'
    fields_en = ['`id`', '`productionlkwkwineid`', '`downtimestarttime`', '`downtimeendtime`', '`downtimerekwkwason`', '`downtimeduration`', '`operatkwkworid`', '`repairmanid`', '`kwkwisresolved`', '`remark`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 生产线ID 根据名称选择合适的函数来生成数据
        productionlkwkwineid = get(faker,'生产线ID')
        values.append('\''+str(productionlkwkwineid)+'\'')
        
        # 用于外键补充
        
        
        
        # 停机开始时间 根据名称选择合适的函数来生成数据
        downtimestarttime = get(faker,'停机开始时间')
        values.append('\''+str(downtimestarttime)+'\'')
        
        # 用于外键补充
        
        
        
        # 停机结束时间 根据名称选择合适的函数来生成数据
        downtimeendtime = get(faker,'停机结束时间')
        values.append('\''+str(downtimeendtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 停机原因 根据名称选择合适的函数来生成数据
        downtimerekwkwason = get(faker,'停机原因')
        values.append('\''+str(downtimerekwkwason)+'\'')
        
        # 用于外键补充
        
        
        
        # 停机时长分钟 根据名称选择合适的函数来生成数据
        downtimeduration = get(faker,'停机时长分钟')
        values.append('\''+str(downtimeduration)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作员ID 根据名称选择合适的函数来生成数据
        operatkwkworid = get(faker,'操作员ID')
        values.append('\''+str(operatkwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 维修员ID 根据名称选择合适的函数来生成数据
        repairmanid = get(faker,'维修员ID')
        values.append('\''+str(repairmanid)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否已解决0未解决1已解决 根据名称选择合适的函数来生成数据
        kwkwisresolved = get(faker,'是否已解决0未解决1已解决')
        values.append('\''+str(kwkwisresolved)+'\'')
        
        # 用于外键补充
        
        
        
        # 备注 根据名称选择合适的函数来生成数据
        remark = get(faker,'备注')
        values.append('\''+str(remark)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 机器人权限分配表
def generate_robotpermkwkwissionassignment(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='robotpermkwkwissionassignment'
    fields_en = ['`id`', '`robotid`', '`permkwkwissionid`', '`assignmentdate`', '`expirydate`', '`isactive`', '`createdby`', '`lkwkwastmodkwkwifiedby`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 机器人ID 根据名称选择合适的函数来生成数据
        robotid = get(faker,'机器人ID')
        values.append('\''+str(robotid)+'\'')
        
        # 用于外键补充
        
        
        
        # 权限ID 根据名称选择合适的函数来生成数据
        permkwkwissionid = get(faker,'权限ID')
        values.append('\''+str(permkwkwissionid)+'\'')
        
        # 用于外键补充
        
        
        
        # 分配日期 根据名称选择合适的函数来生成数据
        assignmentdate = get(faker,'分配日期')
        values.append('\''+str(assignmentdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 过期日期 根据名称选择合适的函数来生成数据
        expirydate = get(faker,'过期日期')
        values.append('\''+str(expirydate)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改者 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifiedby = get(faker,'最后修改者')
        values.append('\''+str(lkwkwastmodkwkwifiedby)+'\'')
        
        # 用于外键补充
        
        
        
        if '部门ID关联字段' not in cache:
            departmentid = get(faker,'部门ID关联字段')
        else:
            departmentid = faker.random.choice(list(cache.get('部门ID关联字段', )))
        
        # 用于外键补充
        
        if '部门ID关联字段' not in cache:
            cache['部门ID关联字段'] = set()
        cache['部门ID关联字段'].add(departmentid)
        values.append('\''+str(departmentid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 系统管理员
def generate_supermanager(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='supermanager'
    fields_en = ['`username`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 管理员姓名 根据名称选择合适的函数来生成数据
        username = get(faker,'管理员姓名')
        values.append('\''+str(username)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache


def generate():
    cache = dict()
    with codecs.open('faker.sql', 'w', encoding='utf-8') as out:
        sql = 'insert into {databasename}.{table} ({fields_en}) values({values});\r\n'
        faker = Faker('zh_CN')
        database = 'vm780_bb1ff2b101947be5'
        # 表名字符串,字段英文名

            
        # 机器人信息表
        cache.update(generate_robotinfo(faker, sql, out, database,cache=cache))
        
        # 生产线信息表
        cache.update(generate_productionlkwkwineinfo(faker, sql, out, database,cache=cache))
        
        # 安全监控日志表
        cache.update(generate_safetymonitkwkworlog(faker, sql, out, database,cache=cache))
        
        # 报警记录表
        cache.update(generate_alarmreckwkword(faker, sql, out, database,cache=cache))
        
        # 机器人位置表
        cache.update(generate_robotlocation(faker, sql, out, database,cache=cache))
        
        # 机器人状态表
        cache.update(generate_robotstatus(faker, sql, out, database,cache=cache))
        
        # 机器人任务表
        cache.update(generate_robottkwkwask(faker, sql, out, database,cache=cache))
        
        # 生产线配置表
        cache.update(generate_productionlkwkwineconfig(faker, sql, out, database,cache=cache))
        
        # 权限管理表
        cache.update(generate_permkwkwissionmanagement(faker, sql, out, database,cache=cache))
        
        # 用户信息表
        cache.update(generate_userinfo(faker, sql, out, database,cache=cache))
        
        # 角色信息表
        cache.update(generate_roleinfo(faker, sql, out, database,cache=cache))
        
        # 用户角色关联表
        cache.update(generate_userrolerelation(faker, sql, out, database,cache=cache))
        
        # 机器人故障表
        cache.update(generate_robotfault(faker, sql, out, database,cache=cache))
        
        # 维修记录表
        cache.update(generate_makwkwintenancereckwkword(faker, sql, out, database,cache=cache))
        
        # 机器人型号表
        cache.update(generate_robotmokwkwdel(faker, sql, out, database,cache=cache))
        
        # 传感器信息表
        cache.update(generate_senskwkworinfo(faker, sql, out, database,cache=cache))
        
        # 传感器数据表
        cache.update(generate_senskwkwordata(faker, sql, out, database,cache=cache))
        
        # 监控摄像头信息表
        cache.update(generate_camerainfo(faker, sql, out, database,cache=cache))
        
        # 视频录像表
        cache.update(generate_videoreckwkword(faker, sql, out, database,cache=cache))
        
        # 机器人操作日志表
        cache.update(generate_robotoperationlog(faker, sql, out, database,cache=cache))
        
        # 生产线效率统计表
        cache.update(generate_productionlkwkwineefficiency(faker, sql, out, database,cache=cache))
        
        # 机器人固件更新表
        cache.update(generate_robotfirmwareupdate(faker, sql, out, database,cache=cache))
        
        # 机器人固件版本表
        cache.update(generate_robotfirmwareversion(faker, sql, out, database,cache=cache))
        
        # 生产线安全规则表
        cache.update(generate_productionlkwkwinesafetyrule(faker, sql, out, database,cache=cache))
        
        # 机器人安全配置表
        cache.update(generate_robotsafetyconfig(faker, sql, out, database,cache=cache))
        
        # 机器人巡检计划表
        cache.update(generate_robotinspectionplan(faker, sql, out, database,cache=cache))
        
        # 巡检结果表
        cache.update(generate_inspectionresult(faker, sql, out, database,cache=cache))
        
        # 机器人维护周期表
        cache.update(generate_robotmakwkwintenancecycle(faker, sql, out, database,cache=cache))
        
        # 生产线停机记录表
        cache.update(generate_productionlkwkwinedowntimereckwkword(faker, sql, out, database,cache=cache))
        
        # 机器人权限分配表
        cache.update(generate_robotpermkwkwissionassignment(faker, sql, out, database,cache=cache))
        
        # 系统管理员
        cache.update(generate_supermanager(faker, sql, out, database,cache=cache))
        

    from pymysql.connections import Connection
    from pymysql.cursors import DictCursor
    conn = Connection(port=3306, host='localhost', user='root', password=os.getenv('PM_UNIT_DATABASE_PSW', '123456'),
                      database='vm780_bb1ff2b101947be5')
    with codecs.open('faker.sql', 'r', encoding='utf-8') as ins:
        with conn.cursor(DictCursor) as cursor:
            count = 0
            for i, sql in enumerate(ins.readlines()):
                try:
                    cursor.execute(sql)
                    cursor.fetchall()
                except Exception as e:
                    print('error: ', e)
                    print(sql)
                    continue
                count += 1
                    
        conn.commit()
        print('Generate OK,Insert Total:', count, '个记录', i+1, '个sql')
    os.remove('faker.sql')


if __name__ == '__main__':
    generate()

